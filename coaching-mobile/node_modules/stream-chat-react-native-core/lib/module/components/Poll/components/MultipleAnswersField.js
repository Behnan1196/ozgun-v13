var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultipleAnswersField = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _useMessageComposer = require("../../../contexts/messageInputContext/hooks/useMessageComposer");
var _useStateStore2 = require("../../../hooks/useStateStore");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/MultipleAnswersField.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var pollComposerStateSelector = function pollComposerStateSelector(state) {
  return {
    error: state.errors.max_votes_allowed,
    max_votes_allowed: state.data.max_votes_allowed
  };
};
var MultipleAnswersField = exports.MultipleAnswersField = function MultipleAnswersField() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    allowMultipleVotes = _useState2[0],
    setAllowMultipleVotes = _useState2[1];
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var pollComposer = messageComposer.pollComposer;
  var handleFieldBlur = pollComposer.handleFieldBlur,
    updateFields = pollComposer.updateFields;
  var _useStateStore = (0, _useStateStore2.useStateStore)(pollComposer.state, pollComposerStateSelector),
    error = _useStateStore.error,
    max_votes_allowed = _useStateStore.max_votes_allowed;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_error = _useTheme$theme$color.accent_error,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    _useTheme$theme$poll$ = _useTheme$theme.poll.createContent,
    maxVotes = _useTheme$theme$poll$.maxVotes,
    multipleAnswers = _useTheme$theme$poll$.multipleAnswers;
  var onEnforceUniqueVoteHandler = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (value) {
      setAllowMultipleVotes(value);
      yield updateFields({
        enforce_unique_vote: !value
      });
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [updateFields]);
  var onChangeTextHandler = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newText) {
      yield updateFields({
        max_votes_allowed: newText
      });
    });
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [updateFields]);
  var onBlurHandler = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield handleFieldBlur('max_votes_allowed');
  }), [handleFieldBlur]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.multipleAnswersWrapper, {
      backgroundColor: bg_user
    }, multipleAnswers.wrapper],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.multipleAnswersRow, multipleAnswers.row],
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: black
        }, multipleAnswers.title],
        children: t('Multiple answers')
      }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
        onValueChange: onEnforceUniqueVoteHandler,
        value: allowMultipleVotes
      })]
    }), allowMultipleVotes ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.maxVotesWrapper, maxVotes.wrapper],
      children: [max_votes_allowed && error ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.maxVotesValidationText, {
          color: accent_error
        }, maxVotes.validationText],
        children: t(error)
      }) : null, (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flexDirection: 'row'
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          inputMode: "numeric",
          onBlur: onBlurHandler,
          onChangeText: onChangeTextHandler,
          placeholder: t('Maximum votes per person'),
          style: [styles.maxVotesInput, {
            color: black
          }, maxVotes.input]
        })
      })]
    }) : null]
  });
};
var styles = _reactNative.StyleSheet.create({
  maxVotesInput: {
    flex: 1,
    fontSize: 16
  },
  maxVotesValidationText: {
    fontSize: 12,
    left: 16,
    position: 'absolute',
    top: 0
  },
  maxVotesWrapper: {
    alignItems: 'flex-start',
    flexDirection: 'column',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  multipleAnswersRow: {
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  multipleAnswersWrapper: {
    borderRadius: 12,
    marginTop: 16
  },
  text: {
    fontSize: 16
  },
  textInputWrapper: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 18
  }
});
//# sourceMappingURL=MultipleAnswersField.js.map