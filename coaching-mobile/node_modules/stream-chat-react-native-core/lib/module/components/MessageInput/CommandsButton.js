var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommandsButton = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _Lightning = require("../../icons/Lightning");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/CommandsButton.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CommandsButton = exports.CommandsButton = function CommandsButton(props) {
  var handleOnPress = props.handleOnPress;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var onPressHandler = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (event) {
      if (handleOnPress) {
        handleOnPress(event);
        return;
      }
      yield textComposer.handleChange({
        selection: {
          end: 1,
          start: 1
        },
        text: '/'
      });
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [handleOnPress, textComposer]);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    grey = _useTheme$theme.colors.grey,
    commandsButton = _useTheme$theme.messageInput.commandsButton;
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
    onPress: onPressHandler,
    style: [commandsButton],
    testID: "commands-button",
    children: (0, _jsxRuntime.jsx)(_Lightning.Lightning, {
      fill: grey,
      size: 32
    })
  });
};
CommandsButton.displayName = 'CommandsButton{messageInput}';
//# sourceMappingURL=CommandsButton.js.map