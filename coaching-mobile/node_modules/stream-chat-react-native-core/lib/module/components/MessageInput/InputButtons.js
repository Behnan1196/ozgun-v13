var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputButtonsWithContext = exports.InputButtons = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../contexts");
var _useAttachmentManagerState = require("../../contexts/messageInputContext/hooks/useAttachmentManagerState");
var _useMessageComposer2 = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _OwnCapabilitiesContext = require("../../contexts/ownCapabilitiesContext/OwnCapabilitiesContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _useStateStore2 = require("../../hooks/useStateStore");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/InputButtons.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    command: state.command,
    hasText: !!state.text
  };
};
var InputButtonsWithContext = exports.InputButtonsWithContext = function InputButtonsWithContext(props) {
  var AttachButton = props.AttachButton,
    CommandsButton = props.CommandsButton,
    hasCameraPicker = props.hasCameraPicker,
    hasCommands = props.hasCommands,
    hasFilePicker = props.hasFilePicker,
    hasImagePicker = props.hasImagePicker,
    MoreOptionsButton = props.MoreOptionsButton,
    ownCapabilitiesUploadFile = props.uploadFile;
  var _useMessageComposer = (0, _useMessageComposer2.useMessageComposer)(),
    textComposer = _useMessageComposer.textComposer;
  var _useStateStore = (0, _useStateStore2.useStateStore)(textComposer.state, textComposerStateSelector),
    command = _useStateStore.command,
    hasText = _useStateStore.hasText;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showMoreOptions = _useState2[0],
    setShowMoreOptions = _useState2[1];
  var _useAttachmentManager = (0, _useAttachmentManagerState.useAttachmentManagerState)(),
    attachments = _useAttachmentManager.attachments;
  var shouldShowMoreOptions = hasText || attachments.length;
  (0, _react.useEffect)(function () {
    setShowMoreOptions(!shouldShowMoreOptions);
  }, [shouldShowMoreOptions]);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    attachButtonContainer = _useTheme.theme.messageInput.attachButtonContainer;
  var handleShowMoreOptions = (0, _react.useCallback)(function () {
    setShowMoreOptions(true);
  }, [setShowMoreOptions]);
  var hasAttachmentUploadCapabilities = (hasCameraPicker || hasFilePicker || hasImagePicker) && ownCapabilitiesUploadFile;
  var showCommandsButton = hasCommands && !hasText;
  if (command) {
    return null;
  }
  if (!hasAttachmentUploadCapabilities && !hasCommands) {
    return null;
  }
  return !showMoreOptions ? (0, _jsxRuntime.jsx)(MoreOptionsButton, {
    handleOnPress: handleShowMoreOptions
  }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [hasAttachmentUploadCapabilities ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [hasCommands ? styles.attachButtonContainer : undefined, attachButtonContainer],
      children: (0, _jsxRuntime.jsx)(AttachButton, {})
    }) : null, showCommandsButton ? (0, _jsxRuntime.jsx)(CommandsButton, {}) : null]
  });
};
var areEqual = function areEqual(prevProps, nextProps) {
  var prevHasCameraPicker = prevProps.hasCameraPicker,
    prevHasCommands = prevProps.hasCommands,
    prevHasFilePicker = prevProps.hasFilePicker,
    prevHasImagePicker = prevProps.hasImagePicker,
    prevSelectedPicker = prevProps.selectedPicker;
  var nextHasCameraPicker = nextProps.hasCameraPicker,
    nextHasCommands = nextProps.hasCommands,
    nextHasFilePicker = nextProps.hasFilePicker,
    nextHasImagePicker = nextProps.hasImagePicker,
    nextSelectedPicker = nextProps.selectedPicker;
  if (prevHasCameraPicker !== nextHasCameraPicker) {
    return false;
  }
  if (prevHasImagePicker !== nextHasImagePicker) {
    return false;
  }
  if (prevHasFilePicker !== nextHasFilePicker) {
    return false;
  }
  if (prevHasCommands !== nextHasCommands) {
    return false;
  }
  if (prevSelectedPicker !== nextSelectedPicker) {
    return false;
  }
  return true;
};
var MemoizedInputButtonsWithContext = _react.default.memo(InputButtonsWithContext, areEqual);
var InputButtons = exports.InputButtons = function InputButtons(props) {
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    AttachButton = _useMessageInputConte.AttachButton,
    CommandsButton = _useMessageInputConte.CommandsButton,
    hasCameraPicker = _useMessageInputConte.hasCameraPicker,
    hasCommands = _useMessageInputConte.hasCommands,
    hasFilePicker = _useMessageInputConte.hasFilePicker,
    hasImagePicker = _useMessageInputConte.hasImagePicker,
    MoreOptionsButton = _useMessageInputConte.MoreOptionsButton,
    toggleAttachmentPicker = _useMessageInputConte.toggleAttachmentPicker;
  var _useAttachmentPickerC = (0, _contexts.useAttachmentPickerContext)(),
    selectedPicker = _useAttachmentPickerC.selectedPicker;
  var _useOwnCapabilitiesCo = (0, _OwnCapabilitiesContext.useOwnCapabilitiesContext)(),
    uploadFile = _useOwnCapabilitiesCo.uploadFile;
  return (0, _jsxRuntime.jsx)(MemoizedInputButtonsWithContext, Object.assign({
    AttachButton: AttachButton,
    CommandsButton: CommandsButton,
    hasCameraPicker: hasCameraPicker,
    hasCommands: hasCommands,
    hasFilePicker: hasFilePicker,
    hasImagePicker: hasImagePicker,
    MoreOptionsButton: MoreOptionsButton,
    selectedPicker: selectedPicker,
    toggleAttachmentPicker: toggleAttachmentPicker,
    uploadFile: uploadFile
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  attachButtonContainer: {
    paddingRight: 5
  }
});
//# sourceMappingURL=InputButtons.js.map