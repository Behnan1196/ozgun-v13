var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AttachmentUploadPreviewList = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _streamChat = require("stream-chat");
var _useAudioPreviewManager = require("./hooks/useAudioPreviewManager");
var _contexts = require("../../contexts");
var _useAttachmentManagerState = require("../../contexts/messageInputContext/hooks/useAttachmentManagerState");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _native = require("../../native");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/AttachmentUploadPreviewList.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var IMAGE_PREVIEW_SIZE = 100;
var FILE_PREVIEW_HEIGHT = 60;
var UnMemoizedAttachmentUploadListPreview = function UnMemoizedAttachmentUploadListPreview(props) {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    flatListWidth = _useState2[0],
    setFlatListWidth = _useState2[1];
  var flatListRef = (0, _react.useRef)(null);
  var AudioAttachmentUploadPreview = props.AudioAttachmentUploadPreview,
    FileAttachmentUploadPreview = props.FileAttachmentUploadPreview,
    ImageAttachmentUploadPreview = props.ImageAttachmentUploadPreview,
    VideoAttachmentUploadPreview = props.VideoAttachmentUploadPreview;
  var _useMessageComposer = (0, _contexts.useMessageComposer)(),
    attachmentManager = _useMessageComposer.attachmentManager;
  var _useAttachmentManager = (0, _useAttachmentManagerState.useAttachmentManagerState)(),
    attachments = _useAttachmentManager.attachments;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    grey_whisper = _useTheme$theme.colors.grey_whisper,
    _useTheme$theme$messa = _useTheme$theme.messageInput,
    attachmentSeparator = _useTheme$theme$messa.attachmentSeparator,
    _useTheme$theme$messa2 = _useTheme$theme$messa.attachmentUploadPreviewList,
    filesFlatList = _useTheme$theme$messa2.filesFlatList,
    imagesFlatList = _useTheme$theme$messa2.imagesFlatList,
    wrapper = _useTheme$theme$messa2.wrapper;
  var imageUploads = attachments.filter(function (attachment) {
    return (0, _streamChat.isLocalImageAttachment)(attachment);
  });
  var fileUploads = (0, _react.useMemo)(function () {
    return attachments.filter(function (attachment) {
      return !(0, _streamChat.isLocalImageAttachment)(attachment);
    });
  }, [attachments]);
  var audioUploads = (0, _react.useMemo)(function () {
    return fileUploads.filter(function (attachment) {
      return (0, _streamChat.isLocalAudioAttachment)(attachment) || (0, _streamChat.isLocalVoiceRecordingAttachment)(attachment);
    });
  }, [fileUploads]);
  var _useAudioPreviewManag = (0, _useAudioPreviewManager.useAudioPreviewManager)(audioUploads),
    audioAttachmentsStateMap = _useAudioPreviewManag.audioAttachmentsStateMap,
    onLoad = _useAudioPreviewManag.onLoad,
    onProgress = _useAudioPreviewManag.onProgress,
    onPlayPause = _useAudioPreviewManag.onPlayPause;
  var renderImageItem = (0, _react.useCallback)(function (_ref) {
    var item = _ref.item;
    return (0, _jsxRuntime.jsx)(ImageAttachmentUploadPreview, {
      attachment: item,
      handleRetry: attachmentManager.uploadAttachment,
      removeAttachments: attachmentManager.removeAttachments
    });
  }, [ImageAttachmentUploadPreview, attachmentManager.removeAttachments, attachmentManager.uploadAttachment]);
  var renderFileItem = (0, _react.useCallback)(function (_ref2) {
    var item = _ref2.item;
    if ((0, _streamChat.isLocalImageAttachment)(item)) {
      return null;
    } else if ((0, _streamChat.isLocalVoiceRecordingAttachment)(item)) {
      return (0, _jsxRuntime.jsx)(AudioAttachmentUploadPreview, {
        attachment: item,
        audioAttachmentConfig: audioAttachmentsStateMap[item.localMetadata.id],
        handleRetry: attachmentManager.uploadAttachment,
        onLoad: onLoad,
        onPlayPause: onPlayPause,
        onProgress: onProgress,
        removeAttachments: attachmentManager.removeAttachments
      });
    } else if ((0, _streamChat.isLocalAudioAttachment)(item)) {
      if ((0, _native.isSoundPackageAvailable)()) {
        return (0, _jsxRuntime.jsx)(AudioAttachmentUploadPreview, {
          attachment: item,
          audioAttachmentConfig: audioAttachmentsStateMap[item.localMetadata.id],
          handleRetry: attachmentManager.uploadAttachment,
          onLoad: onLoad,
          onPlayPause: onPlayPause,
          onProgress: onProgress,
          removeAttachments: attachmentManager.removeAttachments
        });
      } else {
        return (0, _jsxRuntime.jsx)(FileAttachmentUploadPreview, {
          attachment: item,
          flatListWidth: flatListWidth,
          handleRetry: attachmentManager.uploadAttachment,
          removeAttachments: attachmentManager.removeAttachments
        });
      }
    } else if ((0, _streamChat.isVideoAttachment)(item)) {
      return (0, _jsxRuntime.jsx)(VideoAttachmentUploadPreview, {
        attachment: item,
        flatListWidth: flatListWidth,
        handleRetry: attachmentManager.uploadAttachment,
        removeAttachments: attachmentManager.removeAttachments
      });
    } else if ((0, _streamChat.isLocalFileAttachment)(item)) {
      return (0, _jsxRuntime.jsx)(FileAttachmentUploadPreview, {
        attachment: item,
        flatListWidth: flatListWidth,
        handleRetry: attachmentManager.uploadAttachment,
        removeAttachments: attachmentManager.removeAttachments
      });
    } else return null;
  }, [AudioAttachmentUploadPreview, FileAttachmentUploadPreview, VideoAttachmentUploadPreview, attachmentManager.removeAttachments, attachmentManager.uploadAttachment, audioAttachmentsStateMap, flatListWidth, onLoad, onPlayPause, onProgress]);
  (0, _react.useEffect)(function () {
    if (fileUploads.length && flatListRef.current) {
      setTimeout(function () {
        var _flatListRef$current;
        return (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToEnd();
      }, 1);
    }
  }, [fileUploads.length]);
  var onLayout = (0, _react.useCallback)(function (event) {
    if (flatListRef.current) {
      setFlatListWidth(event.nativeEvent.layout.width);
    }
  }, [flatListRef]);
  if (!attachments.length) {
    return null;
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [wrapper],
    children: [imageUploads.length ? (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: imageUploads,
      getItemLayout: function getItemLayout(_, index) {
        return {
          index: index,
          length: IMAGE_PREVIEW_SIZE + 8,
          offset: (IMAGE_PREVIEW_SIZE + 8) * index
        };
      },
      horizontal: true,
      keyExtractor: function keyExtractor(item) {
        return item.localMetadata.id;
      },
      renderItem: renderImageItem,
      style: [styles.imagesFlatList, imagesFlatList]
    }) : null, imageUploads.length && fileUploads.length ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.attachmentSeparator, {
        borderBottomColor: grey_whisper
      }, attachmentSeparator]
    }) : null, fileUploads.length ? (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: fileUploads,
      getItemLayout: function getItemLayout(_, index) {
        return {
          index: index,
          length: FILE_PREVIEW_HEIGHT + 8,
          offset: (FILE_PREVIEW_HEIGHT + 8) * index
        };
      },
      keyExtractor: function keyExtractor(item) {
        return item.localMetadata.id;
      },
      onLayout: onLayout,
      ref: flatListRef,
      renderItem: renderFileItem,
      style: [styles.filesFlatList, filesFlatList],
      testID: 'file-upload-preview'
    }) : null]
  });
};
var MemoizedAttachmentUploadPreviewListWithContext = _react.default.memo(UnMemoizedAttachmentUploadListPreview);
var AttachmentUploadPreviewList = exports.AttachmentUploadPreviewList = function AttachmentUploadPreviewList(props) {
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    AudioAttachmentUploadPreview = _useMessageInputConte.AudioAttachmentUploadPreview,
    FileAttachmentUploadPreview = _useMessageInputConte.FileAttachmentUploadPreview,
    ImageAttachmentUploadPreview = _useMessageInputConte.ImageAttachmentUploadPreview,
    VideoAttachmentUploadPreview = _useMessageInputConte.VideoAttachmentUploadPreview;
  return (0, _jsxRuntime.jsx)(MemoizedAttachmentUploadPreviewListWithContext, Object.assign({
    AudioAttachmentUploadPreview: AudioAttachmentUploadPreview,
    FileAttachmentUploadPreview: FileAttachmentUploadPreview,
    ImageAttachmentUploadPreview: ImageAttachmentUploadPreview,
    VideoAttachmentUploadPreview: VideoAttachmentUploadPreview
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  attachmentSeparator: {
    borderBottomWidth: 1,
    marginBottom: 10
  },
  filesFlatList: {
    marginBottom: 12,
    maxHeight: FILE_PREVIEW_HEIGHT * 2.5 + 16
  },
  imagesFlatList: {
    paddingBottom: 12
  }
});
AttachmentUploadPreviewList.displayName = 'AttachmentUploadPreviewList{messageInput{attachmentUploadPreviewList}}';
//# sourceMappingURL=AttachmentUploadPreviewList.js.map