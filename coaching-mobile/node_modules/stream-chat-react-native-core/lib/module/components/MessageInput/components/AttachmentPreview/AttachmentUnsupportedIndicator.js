var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AttachmentUnsupportedIndicator = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ThemeContext = require("../../../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../../../contexts/translationContext/TranslationContext");
var _Warning = require("../../../../icons/Warning");
var _utils = require("../../../../utils/utils");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/components/AttachmentPreview/AttachmentUnsupportedIndicator.tsx";
var WARNING_ICON_SIZE = 16;
var AttachmentUnsupportedIndicator = exports.AttachmentUnsupportedIndicator = function AttachmentUnsupportedIndicator(_ref) {
  var indicatorType = _ref.indicatorType,
    _ref$isImage = _ref.isImage,
    isImage = _ref$isImage === void 0 ? false : _ref$isImage;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_red = _useTheme$theme$color.accent_red,
    grey_dark = _useTheme$theme$color.grey_dark,
    overlay = _useTheme$theme$color.overlay,
    white = _useTheme$theme$color.white,
    _useTheme$theme$messa = _useTheme$theme.messageInput.attachmentUnsupportedIndicator,
    container = _useTheme$theme$messa.container,
    text = _useTheme$theme$messa.text,
    warningIcon = _useTheme$theme$messa.warningIcon;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  if (indicatorType !== _utils.ProgressIndicatorTypes.NOT_SUPPORTED) {
    return null;
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, isImage ? [styles.imageStyle, {
      backgroundColor: overlay
    }] : null, container],
    children: [(0, _jsxRuntime.jsx)(_Warning.Warning, Object.assign({
      height: WARNING_ICON_SIZE,
      pathFill: accent_red,
      style: styles.warningIconStyle,
      width: WARNING_ICON_SIZE
    }, warningIcon)), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.warningText, {
        color: isImage ? white : grey_dark
      }, text],
      children: t('Not supported')
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    flexDirection: 'row',
    marginTop: 4,
    paddingHorizontal: 2
  },
  imageStyle: {
    borderRadius: 16,
    bottom: 8,
    position: 'absolute'
  },
  warningIconStyle: {
    borderRadius: 24,
    marginTop: 6
  },
  warningText: {
    alignItems: 'center',
    color: 'black',
    fontSize: 10,
    justifyContent: 'center',
    marginHorizontal: 4
  }
});
//# sourceMappingURL=AttachmentUnsupportedIndicator.js.map