Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateInputMessageInputContext = void 0;
var _react = require("react");
var useCreateInputMessageInputContext = exports.useCreateInputMessageInputContext = function useCreateInputMessageInputContext(_ref) {
  var additionalTextInputProps = _ref.additionalTextInputProps,
    asyncMessagesLockDistance = _ref.asyncMessagesLockDistance,
    asyncMessagesMinimumPressDuration = _ref.asyncMessagesMinimumPressDuration,
    asyncMessagesMultiSendEnabled = _ref.asyncMessagesMultiSendEnabled,
    asyncMessagesSlideToCancelDistance = _ref.asyncMessagesSlideToCancelDistance,
    AttachButton = _ref.AttachButton,
    AttachmentPickerBottomSheetHandle = _ref.AttachmentPickerBottomSheetHandle,
    attachmentPickerBottomSheetHandleHeight = _ref.attachmentPickerBottomSheetHandleHeight,
    attachmentPickerBottomSheetHeight = _ref.attachmentPickerBottomSheetHeight,
    AttachmentPickerSelectionBar = _ref.AttachmentPickerSelectionBar,
    attachmentSelectionBarHeight = _ref.attachmentSelectionBarHeight,
    AttachmentUploadPreviewList = _ref.AttachmentUploadPreviewList,
    AttachmentUploadProgressIndicator = _ref.AttachmentUploadProgressIndicator,
    AudioAttachmentUploadPreview = _ref.AudioAttachmentUploadPreview,
    AudioRecorder = _ref.AudioRecorder,
    audioRecordingEnabled = _ref.audioRecordingEnabled,
    AudioRecordingInProgress = _ref.AudioRecordingInProgress,
    AudioRecordingLockIndicator = _ref.AudioRecordingLockIndicator,
    AudioRecordingPreview = _ref.AudioRecordingPreview,
    AudioRecordingWaveform = _ref.AudioRecordingWaveform,
    AutoCompleteSuggestionHeader = _ref.AutoCompleteSuggestionHeader,
    AutoCompleteSuggestionItem = _ref.AutoCompleteSuggestionItem,
    AutoCompleteSuggestionList = _ref.AutoCompleteSuggestionList,
    channelId = _ref.channelId,
    CameraSelectorIcon = _ref.CameraSelectorIcon,
    CommandInput = _ref.CommandInput,
    CommandsButton = _ref.CommandsButton,
    compressImageQuality = _ref.compressImageQuality,
    CooldownTimer = _ref.CooldownTimer,
    CreatePollContent = _ref.CreatePollContent,
    CreatePollIcon = _ref.CreatePollIcon,
    doFileUploadRequest = _ref.doFileUploadRequest,
    editMessage = _ref.editMessage,
    FileAttachmentUploadPreview = _ref.FileAttachmentUploadPreview,
    FileSelectorIcon = _ref.FileSelectorIcon,
    handleAttachButtonPress = _ref.handleAttachButtonPress,
    hasCameraPicker = _ref.hasCameraPicker,
    hasCommands = _ref.hasCommands,
    hasFilePicker = _ref.hasFilePicker,
    hasImagePicker = _ref.hasImagePicker,
    ImageAttachmentUploadPreview = _ref.ImageAttachmentUploadPreview,
    ImageSelectorIcon = _ref.ImageSelectorIcon,
    Input = _ref.Input,
    InputButtons = _ref.InputButtons,
    InputEditingStateHeader = _ref.InputEditingStateHeader,
    InputReplyStateHeader = _ref.InputReplyStateHeader,
    MoreOptionsButton = _ref.MoreOptionsButton,
    openPollCreationDialog = _ref.openPollCreationDialog,
    SendButton = _ref.SendButton,
    sendMessage = _ref.sendMessage,
    SendMessageDisallowedIndicator = _ref.SendMessageDisallowedIndicator,
    setInputRef = _ref.setInputRef,
    showPollCreationDialog = _ref.showPollCreationDialog,
    ShowThreadMessageInChannelButton = _ref.ShowThreadMessageInChannelButton,
    StartAudioRecordingButton = _ref.StartAudioRecordingButton,
    StopMessageStreamingButton = _ref.StopMessageStreamingButton,
    VideoAttachmentUploadPreview = _ref.VideoAttachmentUploadPreview,
    VideoRecorderSelectorIcon = _ref.VideoRecorderSelectorIcon;
  var inputMessageInputContext = (0, _react.useMemo)(function () {
    return {
      additionalTextInputProps: additionalTextInputProps,
      asyncMessagesLockDistance: asyncMessagesLockDistance,
      asyncMessagesMinimumPressDuration: asyncMessagesMinimumPressDuration,
      asyncMessagesMultiSendEnabled: asyncMessagesMultiSendEnabled,
      asyncMessagesSlideToCancelDistance: asyncMessagesSlideToCancelDistance,
      AttachButton: AttachButton,
      AttachmentPickerBottomSheetHandle: AttachmentPickerBottomSheetHandle,
      attachmentPickerBottomSheetHandleHeight: attachmentPickerBottomSheetHandleHeight,
      attachmentPickerBottomSheetHeight: attachmentPickerBottomSheetHeight,
      AttachmentPickerSelectionBar: AttachmentPickerSelectionBar,
      attachmentSelectionBarHeight: attachmentSelectionBarHeight,
      AttachmentUploadPreviewList: AttachmentUploadPreviewList,
      AttachmentUploadProgressIndicator: AttachmentUploadProgressIndicator,
      AudioAttachmentUploadPreview: AudioAttachmentUploadPreview,
      AudioRecorder: AudioRecorder,
      audioRecordingEnabled: audioRecordingEnabled,
      AudioRecordingInProgress: AudioRecordingInProgress,
      AudioRecordingLockIndicator: AudioRecordingLockIndicator,
      AudioRecordingPreview: AudioRecordingPreview,
      AudioRecordingWaveform: AudioRecordingWaveform,
      AutoCompleteSuggestionHeader: AutoCompleteSuggestionHeader,
      AutoCompleteSuggestionItem: AutoCompleteSuggestionItem,
      AutoCompleteSuggestionList: AutoCompleteSuggestionList,
      CameraSelectorIcon: CameraSelectorIcon,
      CommandInput: CommandInput,
      CommandsButton: CommandsButton,
      compressImageQuality: compressImageQuality,
      CooldownTimer: CooldownTimer,
      CreatePollContent: CreatePollContent,
      CreatePollIcon: CreatePollIcon,
      doFileUploadRequest: doFileUploadRequest,
      editMessage: editMessage,
      FileAttachmentUploadPreview: FileAttachmentUploadPreview,
      FileSelectorIcon: FileSelectorIcon,
      handleAttachButtonPress: handleAttachButtonPress,
      hasCameraPicker: hasCameraPicker,
      hasCommands: hasCommands,
      hasFilePicker: hasFilePicker,
      hasImagePicker: hasImagePicker,
      ImageAttachmentUploadPreview: ImageAttachmentUploadPreview,
      ImageSelectorIcon: ImageSelectorIcon,
      Input: Input,
      InputButtons: InputButtons,
      InputEditingStateHeader: InputEditingStateHeader,
      InputReplyStateHeader: InputReplyStateHeader,
      MoreOptionsButton: MoreOptionsButton,
      openPollCreationDialog: openPollCreationDialog,
      SendButton: SendButton,
      sendMessage: sendMessage,
      SendMessageDisallowedIndicator: SendMessageDisallowedIndicator,
      setInputRef: setInputRef,
      showPollCreationDialog: showPollCreationDialog,
      ShowThreadMessageInChannelButton: ShowThreadMessageInChannelButton,
      StartAudioRecordingButton: StartAudioRecordingButton,
      StopMessageStreamingButton: StopMessageStreamingButton,
      VideoAttachmentUploadPreview: VideoAttachmentUploadPreview,
      VideoRecorderSelectorIcon: VideoRecorderSelectorIcon
    };
  }, [compressImageQuality, channelId, CreatePollContent, showPollCreationDialog]);
  return inputMessageInputContext;
};
//# sourceMappingURL=useCreateInputMessageInputContext.js.map