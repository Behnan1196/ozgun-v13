var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChannelMessages = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _selectMessagesForChannels = require("./queries/selectMessagesForChannels");
var _selectReactionsForMessages = require("./queries/selectReactionsForMessages");
var _utils = require("../../utils/utils");
var _mapStorableToMessage = require("../mappers/mapStorableToMessage");
var _createSelectQuery = require("../sqlite-utils/createSelectQuery");
var _SqliteClient = require("../SqliteClient");
var getChannelMessages = exports.getChannelMessages = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
    var channelIds = _ref.channelIds,
      currentUserId = _ref.currentUserId;
    _SqliteClient.SqliteClient.logger == null || _SqliteClient.SqliteClient.logger('info', 'getChannelMessages', {
      channelIds: channelIds,
      currentUserId: currentUserId
    });
    var messageRows = yield (0, _selectMessagesForChannels.selectMessagesForChannels)(channelIds);
    var messageIds = messageRows.map(function (_ref3) {
      var id = _ref3.id;
      return id;
    });
    var reactionRows = yield (0, _selectReactionsForMessages.selectReactionsForMessages)(messageIds, null);
    var messageIdVsReactions = {};
    reactionRows.forEach(function (reaction) {
      if (!messageIdVsReactions[reaction.messageId]) {
        messageIdVsReactions[reaction.messageId] = [];
      }
      messageIdVsReactions[reaction.messageId].push(reaction);
    });
    var messageIdsVsPolls = {};
    var pollsById = {};
    var messagesWithPolls = messageRows.filter(function (message) {
      return !!message.poll_id;
    });
    var polls = yield _SqliteClient.SqliteClient.executeSql.apply(null, (0, _createSelectQuery.createSelectQuery)('poll', ['*'], {
      id: messagesWithPolls.map(function (message) {
        return message.poll_id;
      })
    }));
    polls.forEach(function (poll) {
      pollsById[poll.id] = poll;
    });
    messagesWithPolls.forEach(function (message) {
      messageIdsVsPolls[message.poll_id] = pollsById[message.poll_id];
    });
    var cidVsMessages = {};
    messageRows.forEach(function (m) {
      if (!cidVsMessages[m.cid]) {
        cidVsMessages[m.cid] = [];
      }
      if (!(0, _utils.isBlockedMessage)(m)) {
        cidVsMessages[m.cid].push((0, _mapStorableToMessage.mapStorableToMessage)({
          currentUserId: currentUserId,
          messageRow: m,
          pollRow: messageIdsVsPolls[m.poll_id],
          reactionRows: messageIdVsReactions[m.id]
        }));
      }
    });
    return cidVsMessages;
  });
  return function getChannelMessages(_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=getChannelMessages.js.map