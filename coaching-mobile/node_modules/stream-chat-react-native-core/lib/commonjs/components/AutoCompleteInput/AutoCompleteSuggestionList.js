Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_LIST_HEIGHT = exports.AutoCompleteSuggestionList = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _useStateStore3 = require("../../hooks/useStateStore");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AutoCompleteInput/AutoCompleteSuggestionList.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DEFAULT_LIST_HEIGHT = exports.DEFAULT_LIST_HEIGHT = 200;
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    suggestions: state.suggestions,
    text: state.text
  };
};
var searchSourceStateSelector = function searchSourceStateSelector(nextValue) {
  return {
    items: nextValue.items
  };
};
var AutoCompleteSuggestionList = exports.AutoCompleteSuggestionList = function AutoCompleteSuggestionList(_ref) {
  var _useStateStore2;
  var propsAutoCompleteSuggestionHeader = _ref.AutoCompleteSuggestionHeader,
    propsAutoCompleteSuggestionItem = _ref.AutoCompleteSuggestionItem;
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    contextAutoCompleteSuggestionHeader = _useMessageInputConte.AutoCompleteSuggestionHeader,
    contextAutoCompleteSuggestionItem = _useMessageInputConte.AutoCompleteSuggestionItem;
  var AutoCompleteSuggestionHeader = propsAutoCompleteSuggestionHeader != null ? propsAutoCompleteSuggestionHeader : contextAutoCompleteSuggestionHeader;
  var AutoCompleteSuggestionItem = propsAutoCompleteSuggestionItem != null ? propsAutoCompleteSuggestionItem : contextAutoCompleteSuggestionItem;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var _useStateStore = (0, _useStateStore3.useStateStore)(textComposer.state, textComposerStateSelector),
    suggestions = _useStateStore.suggestions;
  var _ref2 = (_useStateStore2 = (0, _useStateStore3.useStateStore)(suggestions == null ? void 0 : suggestions.searchSource.state, searchSourceStateSelector)) != null ? _useStateStore2 : {},
    items = _ref2.items;
  var trigger = suggestions == null ? void 0 : suggestions.trigger;
  var queryText = suggestions == null ? void 0 : suggestions.query;
  var triggerType = {
    '/': 'command',
    ':': 'emoji',
    '@': 'mention'
  }[trigger != null ? trigger : ''];
  var showList = (0, _react.useMemo)(function () {
    return items && (items == null ? void 0 : items.length) > 0;
  }, [items]);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$messa = _useTheme$theme.messageInput,
    maxHeight = _useTheme$theme$messa.container.maxHeight,
    flatlist = _useTheme$theme$messa.suggestionsListContainer.flatlist;
  var renderItem = (0, _react.useCallback)(function (_ref3) {
    var item = _ref3.item;
    return AutoCompleteSuggestionItem ? (0, _jsxRuntime.jsx)(AutoCompleteSuggestionItem, {
      itemProps: item,
      triggerType: triggerType
    }) : null;
  }, [AutoCompleteSuggestionItem, triggerType]);
  var renderHeader = (0, _react.useCallback)(function () {
    return AutoCompleteSuggestionHeader ? (0, _jsxRuntime.jsx)(AutoCompleteSuggestionHeader, {
      queryText: queryText,
      triggerType: triggerType
    }) : null;
  }, [AutoCompleteSuggestionHeader, queryText, triggerType]);
  if (!showList || !triggerType) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container],
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: items,
      keyboardShouldPersistTaps: "always",
      keyExtractor: function keyExtractor(item) {
        return item.id;
      },
      ListHeaderComponent: renderHeader,
      renderItem: renderItem,
      style: [styles.flatlist, flatlist, {
        backgroundColor: white,
        maxHeight: maxHeight,
        shadowColor: black
      }],
      testID: 'auto-complete-suggestion-list'
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    maxHeight: DEFAULT_LIST_HEIGHT
  },
  flatlist: {
    borderRadius: 8,
    elevation: 3,
    marginHorizontal: 8,
    shadowOffset: {
      height: 1,
      width: 0
    },
    shadowOpacity: 0.22,
    shadowRadius: 2.22
  }
});
AutoCompleteSuggestionList.displayName = 'AutoCompleteSuggestionList{messageInput{suggestions{List}}}';
//# sourceMappingURL=AutoCompleteSuggestionList.js.map