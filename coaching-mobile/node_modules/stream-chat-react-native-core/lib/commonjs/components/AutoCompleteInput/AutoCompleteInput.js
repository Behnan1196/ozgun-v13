var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoCompleteInput = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ChannelContext = require("../../contexts/channelContext/ChannelContext");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../contexts/translationContext/TranslationContext");
var _useStateStore3 = require("../../hooks/useStateStore");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["channel", "cooldownActive", "setInputBoxRef", "t"];
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AutoCompleteInput/AutoCompleteInput.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    command: state.command,
    text: state.text
  };
};
var configStateSelector = function configStateSelector(state) {
  return {
    enabled: state.text.enabled
  };
};
var MAX_NUMBER_OF_LINES = 5;
var AutoCompleteInputWithContext = function AutoCompleteInputWithContext(props) {
  var channel = props.channel,
    _props$cooldownActive = props.cooldownActive,
    cooldownActive = _props$cooldownActive === void 0 ? false : _props$cooldownActive,
    setInputBoxRef = props.setInputBoxRef,
    t = props.t,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    localText = _useState2[0],
    setLocalText = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    textHeight = _useState4[0],
    setTextHeight = _useState4[1];
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var _useStateStore = (0, _useStateStore3.useStateStore)(textComposer.state, textComposerStateSelector),
    command = _useStateStore.command,
    text = _useStateStore.text;
  var _useStateStore2 = (0, _useStateStore3.useStateStore)(messageComposer.configState, configStateSelector),
    enabled = _useStateStore2.enabled;
  var maxMessageLength = (0, _react.useMemo)(function () {
    var _channel$getConfig;
    return (_channel$getConfig = channel.getConfig()) == null ? void 0 : _channel$getConfig.max_message_length;
  }, [channel]);
  var numberOfLines = (0, _react.useMemo)(function () {
    var _props$numberOfLines;
    return (_props$numberOfLines = props.numberOfLines) != null ? _props$numberOfLines : MAX_NUMBER_OF_LINES;
  }, [props.numberOfLines]);
  (0, _react.useEffect)(function () {
    setLocalText(text);
  }, [text]);
  var handleSelectionChange = (0, _react.useCallback)(function (e) {
    var selection = e.nativeEvent.selection;
    textComposer.setSelection(selection);
  }, [textComposer]);
  var onChangeTextHandler = (0, _react.useCallback)(function (newText) {
    setLocalText(newText);
    textComposer.handleChange({
      selection: {
        end: newText.length,
        start: newText.length
      },
      text: newText
    });
  }, [textComposer]);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    black = _useTheme$theme$color.black,
    grey = _useTheme$theme$color.grey,
    inputBox = _useTheme$theme.messageInput.inputBox;
  var placeholderText = (0, _react.useMemo)(function () {
    return command ? t('Search') : cooldownActive ? t('Slow mode ON') : t('Send a message');
  }, [command, cooldownActive, t]);
  var handleContentSizeChange = (0, _react.useCallback)(function (_ref) {
    var contentSize = _ref.nativeEvent.contentSize;
    setTextHeight(contentSize.height);
  }, []);
  return (0, _jsxRuntime.jsx)(_reactNative.TextInput, Object.assign({
    autoFocus: !!command,
    editable: enabled,
    maxLength: maxMessageLength,
    multiline: true,
    onChangeText: onChangeTextHandler,
    onContentSizeChange: handleContentSizeChange,
    onSelectionChange: handleSelectionChange,
    placeholder: placeholderText,
    placeholderTextColor: grey,
    ref: setInputBoxRef,
    style: [styles.inputBox, {
      color: black,
      maxHeight: (textHeight || 17) * numberOfLines,
      textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left'
    }, inputBox],
    testID: "auto-complete-text-input",
    value: localText
  }, rest));
};
var areEqual = function areEqual(prevProps, nextProps) {
  var prevChannel = prevProps.channel,
    prevCooldownActive = prevProps.cooldownActive,
    prevT = prevProps.t;
  var nextChannel = nextProps.channel,
    nextCooldownActive = nextProps.cooldownActive,
    nextT = nextProps.t;
  var tEqual = prevT === nextT;
  if (!tEqual) {
    return false;
  }
  var cooldownActiveEqual = prevCooldownActive === nextCooldownActive;
  if (!cooldownActiveEqual) {
    return false;
  }
  var channelEqual = prevChannel.cid === nextChannel.cid;
  if (!channelEqual) {
    return false;
  }
  return true;
};
var MemoizedAutoCompleteInput = _react.default.memo(AutoCompleteInputWithContext, areEqual);
var AutoCompleteInput = exports.AutoCompleteInput = function AutoCompleteInput(props) {
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    setInputBoxRef = _useMessageInputConte.setInputBoxRef;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useChannelContext = (0, _ChannelContext.useChannelContext)(),
    channel = _useChannelContext.channel;
  return (0, _jsxRuntime.jsx)(MemoizedAutoCompleteInput, Object.assign({
    channel: channel,
    setInputBoxRef: setInputBoxRef,
    t: t
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  inputBox: {
    flex: 1,
    fontSize: 16,
    includeFontPadding: false,
    padding: 0,
    paddingTop: 0,
    textAlignVertical: 'center'
  }
});
AutoCompleteInput.displayName = 'AutoCompleteInput{messageInput{inputBox}}';
//# sourceMappingURL=AutoCompleteInput.js.map