var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MentionSuggestionItem = exports.EmojiSuggestionItem = exports.CommandSuggestionItem = exports.AutoCompleteSuggestionItem = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AutoCompleteSuggestionCommandIcon = require("./AutoCompleteSuggestionCommandIcon");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _AtMentions = require("../../icons/AtMentions");
var _Avatar = require("../Avatar/Avatar");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AutoCompleteInput/AutoCompleteSuggestionItem.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MentionSuggestionItem = exports.MentionSuggestionItem = function MentionSuggestionItem(item) {
  var id = item.id,
    image = item.image,
    name = item.name,
    online = item.online;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    black = _useTheme$theme$color.black,
    _useTheme$theme$messa = _useTheme$theme.messageInput.suggestions.mention,
    avatarSize = _useTheme$theme$messa.avatarSize,
    column = _useTheme$theme$messa.column,
    mentionContainer = _useTheme$theme$messa.container,
    nameStyle = _useTheme$theme$messa.name;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, mentionContainer],
    children: [(0, _jsxRuntime.jsx)(_Avatar.Avatar, {
      image: image,
      name: name,
      online: online,
      size: avatarSize
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.column, column],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.name, {
          color: black
        }, nameStyle],
        testID: "mentions-item-name",
        children: name || id
      })
    }), (0, _jsxRuntime.jsx)(_AtMentions.AtMentions, {
      pathFill: accent_blue
    })]
  });
};
var EmojiSuggestionItem = exports.EmojiSuggestionItem = function EmojiSuggestionItem(item) {
  var native = item.native,
    name = item.name;
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    black = _useTheme2$theme.colors.black,
    _useTheme2$theme$mess = _useTheme2$theme.messageInput.suggestions.emoji,
    emojiContainer = _useTheme2$theme$mess.container,
    text = _useTheme2$theme$mess.text;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, emojiContainer],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: black
      }, text],
      testID: "emojis-item-unicode",
      children: native
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: black
      }, text],
      testID: "emojis-item-name",
      children: ` ${name}`
    })]
  });
};
var CommandSuggestionItem = exports.CommandSuggestionItem = function CommandSuggestionItem(item) {
  var args = item.args,
    name = item.name;
  var _useTheme3 = (0, _ThemeContext.useTheme)(),
    _useTheme3$theme = _useTheme3.theme,
    _useTheme3$theme$colo = _useTheme3$theme.colors,
    black = _useTheme3$theme$colo.black,
    grey = _useTheme3$theme$colo.grey,
    _useTheme3$theme$mess = _useTheme3$theme.messageInput.suggestions.command,
    argsStyle = _useTheme3$theme$mess.args,
    commandContainer = _useTheme3$theme$mess.container,
    title = _useTheme3$theme$mess.title;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, commandContainer],
    children: [name ? (0, _jsxRuntime.jsx)(_AutoCompleteSuggestionCommandIcon.AutoCompleteSuggestionCommandIcon, {
      name: name
    }) : null, (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.title, {
        color: black
      }, title],
      testID: "commands-item-title",
      children: (name || '').replace(/^\w/, function (char) {
        return char.toUpperCase();
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.args, {
        color: grey
      }, argsStyle],
      testID: "commands-item-args",
      children: `/${name} ${args}`
    })]
  });
};
var SuggestionItem = function SuggestionItem(_ref) {
  var item = _ref.item,
    triggerType = _ref.triggerType;
  switch (triggerType) {
    case 'mention':
      return (0, _jsxRuntime.jsx)(MentionSuggestionItem, Object.assign({}, item));
    case 'emoji':
      return (0, _jsxRuntime.jsx)(EmojiSuggestionItem, Object.assign({}, item));
    case 'command':
      return (0, _jsxRuntime.jsx)(CommandSuggestionItem, Object.assign({}, item));
    default:
      return null;
  }
};
var UnMemoizedAutoCompleteSuggestionItem = function UnMemoizedAutoCompleteSuggestionItem(_ref2) {
  var itemProps = _ref2.itemProps,
    triggerType = _ref2.triggerType;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var _useTheme4 = (0, _ThemeContext.useTheme)(),
    itemStyle = _useTheme4.theme.messageInput.suggestions.item;
  var handlePress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield textComposer.handleSelect(itemProps);
  }), [itemProps, textComposer]);
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
    onPress: handlePress,
    style: function style(_ref4) {
      var pressed = _ref4.pressed;
      return [{
        opacity: pressed ? 0.8 : 1
      }, itemStyle];
    },
    testID: "suggestion-item",
    children: (0, _jsxRuntime.jsx)(SuggestionItem, {
      item: itemProps,
      triggerType: triggerType
    })
  });
};
var areEqual = function areEqual(prevProps, nextProps) {
  var prevItemProps = prevProps.itemProps,
    prevType = prevProps.triggerType;
  var nextItemProps = nextProps.itemProps,
    nextType = nextProps.triggerType;
  var itemPropsEqual = prevItemProps === nextItemProps;
  if (!itemPropsEqual) {
    return false;
  }
  var typeEqual = prevType === nextType;
  if (!typeEqual) {
    return false;
  }
  return true;
};
var MemoizedAutoCompleteSuggestionItem = _react.default.memo(UnMemoizedAutoCompleteSuggestionItem, areEqual);
var AutoCompleteSuggestionItem = exports.AutoCompleteSuggestionItem = function AutoCompleteSuggestionItem(props) {
  return (0, _jsxRuntime.jsx)(MemoizedAutoCompleteSuggestionItem, Object.assign({}, props));
};
var styles = _reactNative.StyleSheet.create({
  args: {
    fontSize: 14
  },
  column: {
    flex: 1,
    justifyContent: 'space-evenly',
    paddingLeft: 8
  },
  container: {
    alignItems: 'center',
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 8
  },
  name: {
    fontSize: 14,
    fontWeight: 'bold',
    paddingBottom: 2
  },
  tag: {
    fontSize: 12,
    fontWeight: '600'
  },
  text: {
    fontSize: 14
  },
  title: {
    fontSize: 14,
    fontWeight: 'bold',
    paddingHorizontal: 8
  }
});
//# sourceMappingURL=AutoCompleteSuggestionItem.js.map