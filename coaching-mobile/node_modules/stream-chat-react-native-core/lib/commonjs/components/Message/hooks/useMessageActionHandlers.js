var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMessageActionHandlers = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _TranslationContext = require("../../../contexts/translationContext/TranslationContext");
var _native = require("../../../native");
var useMessageActionHandlers = exports.useMessageActionHandlers = function useMessageActionHandlers(_ref) {
  var channel = _ref.channel,
    client = _ref.client,
    deleteMessage = _ref.deleteMessage,
    deleteReaction = _ref.deleteReaction,
    message = _ref.message,
    retrySendMessage = _ref.retrySendMessage,
    sendReaction = _ref.sendReaction,
    setEditingState = _ref.setEditingState,
    setQuotedMessage = _ref.setQuotedMessage;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  var handleResendMessage = function handleResendMessage() {
    return retrySendMessage(message);
  };
  var handleQuotedReplyMessage = function handleQuotedReplyMessage() {
    setQuotedMessage(message);
  };
  var isMuted = (client.mutedUsers || []).some(function (mute) {
    var _message$user;
    return mute.user.id === client.userID && mute.target.id === ((_message$user = message.user) == null ? void 0 : _message$user.id);
  });
  var handleCopyMessage = function handleCopyMessage() {
    if (!message.text) {
      return;
    }
    _native.NativeHandlers.setClipboardString(message.text);
  };
  var handleDeleteMessage = function handleDeleteMessage() {
    if (!message.id) {
      return;
    }
    _reactNative.Alert.alert(t('Delete Message'), t('Are you sure you want to permanently delete this message?'), [{
      style: 'cancel',
      text: t('Cancel')
    }, {
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* () {
          yield deleteMessage(message);
        });
        function onPress() {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }(),
      style: 'destructive',
      text: t('Delete')
    }], {
      cancelable: false
    });
  };
  var handleToggleMuteUser = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var _message$user2;
      if (!((_message$user2 = message.user) != null && _message$user2.id)) {
        return;
      }
      if (isMuted) {
        yield client.unmuteUser(message.user.id);
      } else {
        yield client.muteUser(message.user.id);
      }
    });
    return function handleToggleMuteUser() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleToggleBanUser = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      var messageUser = message.user;
      if (!messageUser) {
        return;
      }
      if (messageUser.banned) {
        yield client.unbanUser(messageUser.id);
      } else {
        yield client.banUser(messageUser.id);
      }
    });
    return function handleToggleBanUser() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleTogglePinMessage = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      var MessagePinnedHeaderStatus = message.pinned;
      if (!MessagePinnedHeaderStatus) {
        yield client.pinMessage(message, null);
      } else {
        yield client.unpinMessage(message);
      }
    });
    return function handleTogglePinMessage() {
      return _ref4.apply(this, arguments);
    };
  }();
  var handleEditMessage = function handleEditMessage() {
    setEditingState(message);
  };
  var handleFlagMessage = function handleFlagMessage() {
    if (!message.id) {
      return;
    }
    _reactNative.Alert.alert(t('Flag Message'), t('Do you want to send a copy of this message to a moderator for further investigation?'), [{
      style: 'cancel',
      text: t('Cancel')
    }, {
      onPress: function () {
        var _onPress2 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield client.flagMessage(message.id);
            _reactNative.Alert.alert(t('Message flagged'), t('The message has been reported to a moderator.'));
          } catch (error) {
            console.log('Error flagging message:', error);
            _reactNative.Alert.alert(t('Cannot Flag Message'), t('Flag action failed either due to a network issue or the message is already flagged'));
          }
        });
        function onPress() {
          return _onPress2.apply(this, arguments);
        }
        return onPress;
      }(),
      text: t('Flag')
    }], {
      cancelable: false
    });
  };
  var handleMarkUnreadMessage = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (!message.id) {
        return;
      }
      try {
        yield channel.markUnread({
          message_id: message.id
        });
      } catch (error) {
        console.log('Error marking message as unread:', error);
        _reactNative.Alert.alert(t('Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.'));
      }
    });
    return function handleMarkUnreadMessage() {
      return _ref5.apply(this, arguments);
    };
  }();
  var handleToggleReaction = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (reactionType) {
      var _message$own_reaction;
      var messageId = message.id;
      var own_reactions = (_message$own_reaction = message.own_reactions) != null ? _message$own_reaction : [];
      var userExistingReaction = own_reactions.find(function (reaction) {
        if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
          return true;
        } else if (reaction.user && client.userID !== reaction.user.id) {
          console.warn('message.own_reactions contained reactions from a different user, this indicates a bug');
        }
        return false;
      });
      try {
        if (channel && messageId) {
          if (userExistingReaction) {
            yield deleteReaction(userExistingReaction.type, messageId);
          } else {
            yield sendReaction(reactionType, messageId);
          }
        }
      } catch (err) {
        console.log(err);
      }
    });
    return function handleToggleReaction(_x) {
      return _ref6.apply(this, arguments);
    };
  }();
  return {
    handleCopyMessage: handleCopyMessage,
    handleDeleteMessage: handleDeleteMessage,
    handleEditMessage: handleEditMessage,
    handleFlagMessage: handleFlagMessage,
    handleMarkUnreadMessage: handleMarkUnreadMessage,
    handleQuotedReplyMessage: handleQuotedReplyMessage,
    handleResendMessage: handleResendMessage,
    handleToggleBanUser: handleToggleBanUser,
    handleToggleMuteUser: handleToggleMuteUser,
    handleTogglePinMessage: handleTogglePinMessage,
    handleToggleReaction: handleToggleReaction
  };
};
//# sourceMappingURL=useMessageActionHandlers.js.map