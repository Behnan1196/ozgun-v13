Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SendButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _useStateStore2 = require("../../hooks/useStateStore");
var _Search = require("../../icons/Search");
var _SendRight = require("../../icons/SendRight");
var _SendUp = require("../../icons/SendUp");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/SendButton.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    command: state.command
  };
};
var SendButton = exports.SendButton = function SendButton(props) {
  var _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    propsSendMessage = props.sendMessage;
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    sendMessageFromContext = _useMessageInputConte.sendMessage;
  var sendMessage = propsSendMessage || sendMessageFromContext;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var _useStateStore = (0, _useStateStore2.useStateStore)(textComposer.state, textComposerStateSelector),
    command = _useStateStore.command;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    grey_gainsboro = _useTheme$theme$color.grey_gainsboro,
    _useTheme$theme$messa = _useTheme$theme.messageInput,
    searchIcon = _useTheme$theme$messa.searchIcon,
    sendButton = _useTheme$theme$messa.sendButton,
    sendRightIcon = _useTheme$theme$messa.sendRightIcon,
    sendUpIcon = _useTheme$theme$messa.sendUpIcon;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (disabled) {
      return;
    }
    sendMessage();
  }, [disabled, sendMessage]);
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
    disabled: disabled,
    onPress: onPressHandler,
    style: [sendButton],
    testID: "send-button",
    children: command ? (0, _jsxRuntime.jsx)(_Search.Search, Object.assign({
      pathFill: disabled ? grey_gainsboro : accent_blue
    }, searchIcon)) : disabled ? (0, _jsxRuntime.jsx)(_SendRight.SendRight, Object.assign({
      fill: grey_gainsboro,
      size: 32
    }, sendRightIcon)) : (0, _jsxRuntime.jsx)(_SendUp.SendUp, Object.assign({
      fill: accent_blue,
      size: 32
    }, sendUpIcon))
  });
};
SendButton.displayName = 'SendButton{messageInput}';
//# sourceMappingURL=SendButton.js.map