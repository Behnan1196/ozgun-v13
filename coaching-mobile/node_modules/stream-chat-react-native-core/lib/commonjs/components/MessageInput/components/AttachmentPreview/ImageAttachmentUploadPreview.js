var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageAttachmentUploadPreview = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AttachmentUnsupportedIndicator = require("./AttachmentUnsupportedIndicator");
var _AttachmentUploadProgressIndicator = require("./AttachmentUploadProgressIndicator");
var _DismissAttachmentUpload = require("./DismissAttachmentUpload");
var _ChatContext = require("../../../../contexts/chatContext/ChatContext");
var _ThemeContext = require("../../../../contexts/themeContext/ThemeContext");
var _utils = require("../../../../utils/utils");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/components/AttachmentPreview/ImageAttachmentUploadPreview.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var IMAGE_PREVIEW_SIZE = 100;
var ImageAttachmentUploadPreview = exports.ImageAttachmentUploadPreview = function ImageAttachmentUploadPreview(_ref) {
  var _attachment$localMeta;
  var attachment = _ref.attachment,
    handleRetry = _ref.handleRetry,
    removeAttachments = _ref.removeAttachments;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    enableOfflineSupport = _useChatContext.enableOfflineSupport;
  var indicatorType = loading ? _utils.ProgressIndicatorTypes.IN_PROGRESS : (0, _utils.getIndicatorTypeForFileState)(attachment.localMetadata.uploadState, enableOfflineSupport);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$messa = _useTheme.theme.messageInput.imageAttachmentUploadPreview,
    itemContainer = _useTheme$theme$messa.itemContainer,
    upload = _useTheme$theme$messa.upload;
  var onRetryHandler = (0, _react.useCallback)(function () {
    handleRetry(attachment);
  }, [attachment, handleRetry]);
  var onDismissHandler = (0, _react.useCallback)(function () {
    removeAttachments([attachment.localMetadata.id]);
  }, [attachment, removeAttachments]);
  var onLoadEndHandler = (0, _react.useCallback)(function () {
    setLoading(false);
  }, []);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.itemContainer, itemContainer],
    testID: 'image-attachment-upload-preview',
    children: [(0, _jsxRuntime.jsx)(_AttachmentUploadProgressIndicator.AttachmentUploadProgressIndicator, {
      onPress: onRetryHandler,
      style: styles.upload,
      type: indicatorType,
      children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
        onLoadEnd: onLoadEndHandler,
        resizeMode: "cover",
        source: {
          uri: (_attachment$localMeta = attachment.localMetadata.previewUri) != null ? _attachment$localMeta : attachment.image_url
        },
        style: [styles.upload, upload],
        testID: 'image-attachment-upload-preview-image'
      })
    }), (0, _jsxRuntime.jsx)(_DismissAttachmentUpload.DismissAttachmentUpload, {
      onPress: onDismissHandler
    }), indicatorType === _utils.ProgressIndicatorTypes.NOT_SUPPORTED ? (0, _jsxRuntime.jsx)(_AttachmentUnsupportedIndicator.AttachmentUnsupportedIndicator, {
      indicatorType: indicatorType,
      isImage: true
    }) : null]
  });
};
var styles = _reactNative.StyleSheet.create({
  fileSizeText: {
    fontSize: 12,
    paddingHorizontal: 10
  },
  flatList: {
    paddingBottom: 12
  },
  itemContainer: {
    flexDirection: 'row',
    height: IMAGE_PREVIEW_SIZE,
    marginLeft: 8
  },
  upload: {
    borderRadius: 10,
    height: IMAGE_PREVIEW_SIZE,
    width: IMAGE_PREVIEW_SIZE
  }
});
//# sourceMappingURL=ImageAttachmentUploadPreview.js.map