var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommandInput = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _useMessageComposer = require("../../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _useStateStore2 = require("../../../hooks/useStateStore");
var _icons = require("../../../icons");
var _AutoCompleteInput = require("../../AutoCompleteInput/AutoCompleteInput");
var _useCountdown2 = require("../hooks/useCountdown");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/components/CommandInput.tsx";
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    command: state.command
  };
};
var CommandInput = exports.CommandInput = function CommandInput(_ref) {
  var _command$name;
  var propCooldownEndsAt = _ref.cooldownEndsAt,
    disabled = _ref.disabled;
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    contextCooldownEndsAt = _useMessageInputConte.cooldownEndsAt;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var textComposer = messageComposer.textComposer;
  var _useStateStore = (0, _useStateStore2.useStateStore)(textComposer.state, textComposerStateSelector),
    command = _useStateStore.command;
  var cooldownEndsAt = propCooldownEndsAt || contextCooldownEndsAt;
  var _useCountdown = (0, _useCountdown2.useCountdown)(cooldownEndsAt),
    cooldownRemainingSeconds = _useCountdown.seconds;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    grey = _useTheme$theme$color.grey,
    white = _useTheme$theme$color.white,
    _useTheme$theme$messa = _useTheme$theme.messageInput,
    autoCompleteInputContainer = _useTheme$theme$messa.autoCompleteInputContainer,
    _useTheme$theme$messa2 = _useTheme$theme$messa.commandInput,
    closeButton = _useTheme$theme$messa2.closeButton,
    container = _useTheme$theme$messa2.container,
    text = _useTheme$theme$messa2.text;
  var onCloseHandler = function onCloseHandler() {
    textComposer.clearCommand();
    messageComposer == null || messageComposer.restore();
  };
  if (!command) {
    return null;
  }
  var commandName = ((_command$name = command.name) != null ? _command$name : '').toUpperCase();
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.autoCompleteInputContainer, autoCompleteInputContainer],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.giphyContainer, {
        backgroundColor: accent_blue
      }, container],
      children: [(0, _jsxRuntime.jsx)(_icons.GiphyLightning, {
        fill: white,
        size: 16
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.giphyText, {
          color: white
        }, text],
        children: commandName
      })]
    }), (0, _jsxRuntime.jsx)(_AutoCompleteInput.AutoCompleteInput, {
      cooldownActive: !!cooldownRemainingSeconds
    }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      disabled: disabled,
      onPress: onCloseHandler,
      style: function style(_ref2) {
        var pressed = _ref2.pressed;
        return [{
          opacity: pressed ? 0.8 : 1
        }, closeButton];
      },
      testID: "close-button",
      children: (0, _jsxRuntime.jsx)(_icons.CircleClose, {
        height: 20,
        pathFill: grey,
        width: 20
      })
    })]
  });
};
CommandInput.displayName = 'CommandInput{messageInput}';
var styles = _reactNative.StyleSheet.create({
  autoCompleteInputContainer: {
    alignItems: 'center',
    flexDirection: 'row',
    paddingLeft: 8,
    paddingRight: 10
  },
  giphyContainer: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    marginRight: 8,
    paddingHorizontal: 8,
    paddingVertical: 4
  },
  giphyText: {
    fontSize: 12,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=CommandInput.js.map