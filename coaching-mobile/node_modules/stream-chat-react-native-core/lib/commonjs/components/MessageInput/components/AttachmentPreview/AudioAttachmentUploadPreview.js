Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioAttachmentUploadPreview = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AttachmentUnsupportedIndicator = require("./AttachmentUnsupportedIndicator");
var _AttachmentUploadProgressIndicator = require("./AttachmentUploadProgressIndicator");
var _DismissAttachmentUpload = require("./DismissAttachmentUpload");
var _AudioAttachment = require("../../../../components/Attachment/AudioAttachment");
var _ChatContext = require("../../../../contexts/chatContext/ChatContext");
var _utils = require("../../../../utils/utils");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/components/AttachmentPreview/AudioAttachmentUploadPreview.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var AudioAttachmentUploadPreview = exports.AudioAttachmentUploadPreview = function AudioAttachmentUploadPreview(_ref) {
  var attachment = _ref.attachment,
    audioAttachmentConfig = _ref.audioAttachmentConfig,
    handleRetry = _ref.handleRetry,
    removeAttachments = _ref.removeAttachments,
    onLoad = _ref.onLoad,
    onPlayPause = _ref.onPlayPause,
    onProgress = _ref.onProgress;
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    enableOfflineSupport = _useChatContext.enableOfflineSupport;
  var indicatorType = (0, _utils.getIndicatorTypeForFileState)(attachment.localMetadata.uploadState, enableOfflineSupport);
  var finalAttachment = (0, _react.useMemo)(function () {
    return Object.assign({}, attachment, {
      asset_url: attachment.localMetadata.file.uri,
      id: attachment.localMetadata.id
    }, audioAttachmentConfig);
  }, [attachment, audioAttachmentConfig]);
  var onRetryHandler = (0, _react.useCallback)(function () {
    handleRetry(attachment);
  }, [attachment, handleRetry]);
  var onDismissHandler = (0, _react.useCallback)(function () {
    removeAttachments([attachment.localMetadata.id]);
  }, [attachment, removeAttachments]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    testID: 'audio-attachment-upload-preview',
    children: [(0, _jsxRuntime.jsx)(_AttachmentUploadProgressIndicator.AttachmentUploadProgressIndicator, {
      onPress: onRetryHandler,
      style: styles.overlay,
      type: indicatorType,
      children: (0, _jsxRuntime.jsx)(_AudioAttachment.AudioAttachment, {
        hideProgressBar: true,
        item: finalAttachment,
        onLoad: onLoad,
        onPlayPause: onPlayPause,
        onProgress: onProgress,
        showSpeedSettings: false,
        titleMaxLength: 12
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.dismissWrapper,
      children: (0, _jsxRuntime.jsx)(_DismissAttachmentUpload.DismissAttachmentUpload, {
        onPress: onDismissHandler
      })
    }), indicatorType === _utils.ProgressIndicatorTypes.NOT_SUPPORTED ? (0, _jsxRuntime.jsx)(_AttachmentUnsupportedIndicator.AttachmentUnsupportedIndicator, {
      indicatorType: indicatorType,
      isImage: true
    }) : null]
  });
};
var styles = _reactNative.StyleSheet.create({
  dismissWrapper: {
    position: 'absolute',
    right: 8,
    top: 0
  },
  overlay: {
    borderRadius: 12,
    marginHorizontal: 8,
    marginTop: 2
  }
});
//# sourceMappingURL=AudioAttachmentUploadPreview.js.map