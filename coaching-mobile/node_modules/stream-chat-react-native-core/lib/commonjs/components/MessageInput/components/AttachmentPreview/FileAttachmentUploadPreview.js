Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileAttachmentUploadPreview = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AttachmentUnsupportedIndicator = require("./AttachmentUnsupportedIndicator");
var _AttachmentUploadProgressIndicator = require("./AttachmentUploadProgressIndicator");
var _DismissAttachmentUpload = require("./DismissAttachmentUpload");
var _FileAttachment = require("../../../../components/Attachment/FileAttachment");
var _WritingDirectionAwareText = require("../../../../components/RTLComponents/WritingDirectionAwareText");
var _ChatContext = require("../../../../contexts/chatContext/ChatContext");
var _MessagesContext = require("../../../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../../../contexts/themeContext/ThemeContext");
var _getTrimmedAttachmentTitle = require("../../../../utils/getTrimmedAttachmentTitle");
var _utils = require("../../../../utils/utils");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/components/AttachmentPreview/FileAttachmentUploadPreview.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var FileAttachmentUploadPreview = exports.FileAttachmentUploadPreview = function FileAttachmentUploadPreview(_ref) {
  var attachment = _ref.attachment,
    flatListWidth = _ref.flatListWidth,
    handleRetry = _ref.handleRetry,
    removeAttachments = _ref.removeAttachments;
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    enableOfflineSupport = _useChatContext.enableOfflineSupport;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    FileAttachmentIcon = _useMessagesContext.FileAttachmentIcon;
  var indicatorType = (0, _utils.getIndicatorTypeForFileState)(attachment.localMetadata.uploadState, enableOfflineSupport);
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    black = _useTheme$theme$color.black,
    grey = _useTheme$theme$color.grey,
    grey_whisper = _useTheme$theme$color.grey_whisper,
    _useTheme$theme$messa = _useTheme$theme.messageInput.fileAttachmentUploadPreview,
    fileContainer = _useTheme$theme$messa.fileContainer,
    filenameText = _useTheme$theme$messa.filenameText,
    fileSizeText = _useTheme$theme$messa.fileSizeText,
    fileTextContainer = _useTheme$theme$messa.fileTextContainer,
    uploadProgressOverlay = _useTheme$theme$messa.uploadProgressOverlay,
    wrapper = _useTheme$theme$messa.wrapper;
  var onRetryHandler = (0, _react.useCallback)(function () {
    handleRetry(attachment);
  }, [attachment, handleRetry]);
  var onDismissHandler = (0, _react.useCallback)(function () {
    removeAttachments([attachment.localMetadata.id]);
  }, [attachment, removeAttachments]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.wrapper, wrapper],
    testID: 'file-attachment-upload-preview',
    children: [(0, _jsxRuntime.jsx)(_AttachmentUploadProgressIndicator.AttachmentUploadProgressIndicator, {
      onPress: onRetryHandler,
      style: [styles.overlay, {
        width: flatListWidth - 16
      }, uploadProgressOverlay],
      type: indicatorType,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.fileContainer, {
          borderColor: grey_whisper
        }, fileContainer],
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.fileIcon,
          children: (0, _jsxRuntime.jsx)(FileAttachmentIcon, {
            mimeType: attachment.mime_type
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.fileTextContainer, fileTextContainer],
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            numberOfLines: 1,
            style: [styles.filenameText, {
              color: black,
              width: flatListWidth - 16 - 40 - 24 - 24
            }, _reactNative.I18nManager.isRTL ? {
              writingDirection: 'rtl'
            } : {
              writingDirection: 'ltr'
            }, filenameText],
            children: (0, _getTrimmedAttachmentTitle.getTrimmedAttachmentTitle)(attachment.title)
          }), indicatorType === _utils.ProgressIndicatorTypes.NOT_SUPPORTED ? (0, _jsxRuntime.jsx)(_AttachmentUnsupportedIndicator.AttachmentUnsupportedIndicator, {
            indicatorType: indicatorType
          }) : (0, _jsxRuntime.jsx)(_WritingDirectionAwareText.WritingDirectionAwareText, {
            style: [styles.fileSizeText, {
              color: grey
            }, fileSizeText],
            children: attachment.duration ? (0, _utils.getDurationLabelFromDuration)(attachment.duration) : (0, _FileAttachment.getFileSizeDisplayText)(attachment.file_size)
          })]
        })]
      })
    }), (0, _jsxRuntime.jsx)(_DismissAttachmentUpload.DismissAttachmentUpload, {
      onPress: onDismissHandler
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  fileContainer: {
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    paddingHorizontal: 8
  },
  fileIcon: {
    alignItems: 'center',
    alignSelf: 'center',
    justifyContent: 'center'
  },
  filenameText: {
    fontSize: 14,
    fontWeight: 'bold'
  },
  fileSizeText: {
    fontSize: 12,
    marginTop: 10
  },
  fileTextContainer: {
    justifyContent: 'space-around',
    marginVertical: 10,
    paddingHorizontal: 10
  },
  overlay: {
    borderRadius: 12,
    marginTop: 2
  },
  wrapper: {
    flexDirection: 'row',
    marginHorizontal: 8
  }
});
//# sourceMappingURL=FileAttachmentUploadPreview.js.map