var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioAttachment = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dayjs = _interopRequireDefault(require("dayjs"));
var _duration = _interopRequireDefault(require("dayjs/plugin/duration"));
var _contexts = require("../../contexts");
var _useAudioPlayer2 = require("../../hooks/useAudioPlayer");
var _icons = require("../../icons");
var _native = require("../../native");
var _types = require("../../types/types");
var _getTrimmedAttachmentTitle = require("../../utils/getTrimmedAttachmentTitle");
var _ProgressControl = require("../ProgressControl/ProgressControl");
var _WaveProgressBar = require("../ProgressControl/WaveProgressBar");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Attachment/AudioAttachment.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
_dayjs.default.extend(_duration.default);
var AudioAttachment = exports.AudioAttachment = function AudioAttachment(props) {
  var _NativeHandlers$Sound3;
  var _useState = (0, _react.useState)(1.0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentSpeed = _useState2[0],
    setCurrentSpeed = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    audioFinished = _useState4[0],
    setAudioFinished = _useState4[1];
  var soundRef = _react.default.useRef(null);
  var _props$hideProgressBa = props.hideProgressBar,
    hideProgressBar = _props$hideProgressBa === void 0 ? false : _props$hideProgressBa,
    item = props.item,
    onLoad = props.onLoad,
    onPlayPause = props.onPlayPause,
    onProgress = props.onProgress,
    _props$showSpeedSetti = props.showSpeedSettings,
    showSpeedSettings = _props$showSpeedSetti === void 0 ? false : _props$showSpeedSetti,
    testID = props.testID,
    titleMaxLength = props.titleMaxLength;
  var _useAudioPlayer = (0, _useAudioPlayer2.useAudioPlayer)({
      soundRef: soundRef
    }),
    changeAudioSpeed = _useAudioPlayer.changeAudioSpeed,
    pauseAudio = _useAudioPlayer.pauseAudio,
    playAudio = _useAudioPlayer.playAudio,
    seekAudio = _useAudioPlayer.seekAudio;
  var isExpoCLI = _native.NativeHandlers.SDK === 'stream-chat-expo';
  var isVoiceRecording = item.type === _types.FileTypes.VoiceRecording;
  var handleLoad = function handleLoad(payload) {
    if (isVoiceRecording && item.duration) {
      onLoad(item.id, item.duration);
    } else {
      onLoad(item.id, item.duration || payload.duration);
    }
  };
  var handleProgress = function handleProgress(data) {
    var currentTime = data.currentTime,
      seekableDuration = data.seekableDuration;
    if (isVoiceRecording && item.duration) {
      if (currentTime < item.duration && !audioFinished) {
        onProgress(item.id, currentTime / item.duration);
      } else {
        setAudioFinished(true);
      }
    } else {
      if (currentTime < seekableDuration && !audioFinished) {
        onProgress(item.id, currentTime / seekableDuration);
      } else {
        setAudioFinished(true);
      }
    }
  };
  var onSeek = function onSeek(seekResponse) {
    setAudioFinished(false);
    onProgress(item.id, seekResponse.currentTime / item.duration);
  };
  var handlePlayPause = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      if (item.paused) {
        if (isExpoCLI) {
          yield playAudio();
        }
        onPlayPause(item.id, false);
      } else {
        if (isExpoCLI) {
          yield pauseAudio();
        }
        onPlayPause(item.id, true);
      }
    });
    return function handlePlayPause() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleEnd = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      setAudioFinished(false);
      yield pauseAudio();
      onPlayPause(item.id, true);
      yield seekAudio(0);
    });
    return function handleEnd() {
      return _ref2.apply(this, arguments);
    };
  }();
  var dragStart = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (isExpoCLI) {
        yield pauseAudio();
      }
      onPlayPause(item.id, true);
    });
    return function dragStart() {
      return _ref3.apply(this, arguments);
    };
  }();
  var dragProgress = function dragProgress(progress) {
    onProgress(item.id, progress);
  };
  var dragEnd = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (progress) {
      yield seekAudio(progress * item.duration);
      if (isExpoCLI) {
        yield playAudio();
      }
      onPlayPause(item.id, false);
    });
    return function dragEnd(_x) {
      return _ref4.apply(this, arguments);
    };
  }();
  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(playbackStatus) {
    if (!playbackStatus.isLoaded) {
      if (playbackStatus.error) {
        console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
      }
    } else {
      var durationMillis = playbackStatus.durationMillis,
        positionMillis = playbackStatus.positionMillis;
      if (item.duration === 0) {
        onLoad(item.id, durationMillis / 1000);
      } else {
        if (isVoiceRecording && item.duration) {
          onLoad(item.id, item.duration);
        } else {
          onLoad(item.id, durationMillis / 1000);
        }
      }
      if (playbackStatus.isPlaying) {
        if (isVoiceRecording && item.duration) {
          if (positionMillis <= item.duration * 1000) {
            onProgress(item.id, positionMillis / (item.duration * 1000));
          }
        } else {
          if (positionMillis <= durationMillis) {
            onProgress(item.id, positionMillis / durationMillis);
          }
        }
      } else {}
      if (playbackStatus.isBuffering) {}
      if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
        onProgress(item.id, 1);
        handleEnd();
      }
    }
  };
  (0, _react.useEffect)(function () {
    if (isExpoCLI) {
      var initiateSound = function () {
        var _ref5 = (0, _asyncToGenerator2.default)(function* () {
          var _NativeHandlers$Sound;
          if (item && item.asset_url && (_NativeHandlers$Sound = _native.NativeHandlers.Sound) != null && _NativeHandlers$Sound.initializeSound) {
            soundRef.current = yield _native.NativeHandlers.Sound.initializeSound({
              uri: item.asset_url
            }, {
              pitchCorrectionQuality: 'high',
              progressUpdateIntervalMillis: 100,
              shouldCorrectPitch: true
            }, onPlaybackStatusUpdate);
          }
        });
        return function initiateSound() {
          return _ref5.apply(this, arguments);
        };
      }();
      initiateSound();
    }
    return function () {
      var _soundRef$current;
      if ((_soundRef$current = soundRef.current) != null && _soundRef$current.stopAsync && soundRef.current.unloadAsync) {
        soundRef.current.stopAsync();
        soundRef.current.unloadAsync();
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    var _NativeHandlers$Sound2;
    var initalPlayPause = function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* () {
        if (!isExpoCLI) {
          return;
        }
        try {
          if (item.paused) {
            yield pauseAudio();
          } else {
            yield playAudio();
          }
        } catch (e) {
          console.log('An error has occurred while trying to interact with the audio. ', e);
        }
      });
      return function initalPlayPause() {
        return _ref6.apply(this, arguments);
      };
    }();
    if (!((_NativeHandlers$Sound2 = _native.NativeHandlers.Sound) != null && _NativeHandlers$Sound2.Player)) {
      initalPlayPause();
    }
  }, [item.paused, isExpoCLI, pauseAudio, playAudio]);
  var onSpeedChangeHandler = function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* () {
      if (currentSpeed === 2.0) {
        setCurrentSpeed(1.0);
        yield changeAudioSpeed(1.0);
      } else {
        if (currentSpeed === 1.0) {
          setCurrentSpeed(1.5);
          yield changeAudioSpeed(1.5);
        } else if (currentSpeed === 1.5) {
          setCurrentSpeed(2.0);
          yield changeAudioSpeed(2.0);
        }
      }
    });
    return function onSpeedChangeHandler() {
      return _ref7.apply(this, arguments);
    };
  }();
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$audio = _useTheme$theme.audioAttachment,
    container = _useTheme$theme$audio.container,
    leftContainer = _useTheme$theme$audio.leftContainer,
    playPauseButton = _useTheme$theme$audio.playPauseButton,
    progressControlContainer = _useTheme$theme$audio.progressControlContainer,
    progressDurationText = _useTheme$theme$audio.progressDurationText,
    rightContainer = _useTheme$theme$audio.rightContainer,
    speedChangeButton = _useTheme$theme$audio.speedChangeButton,
    speedChangeButtonText = _useTheme$theme$audio.speedChangeButtonText,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    black = _useTheme$theme$color.black,
    grey_dark = _useTheme$theme$color.grey_dark,
    grey_whisper = _useTheme$theme$color.grey_whisper,
    static_black = _useTheme$theme$color.static_black,
    static_white = _useTheme$theme$color.static_white,
    white = _useTheme$theme$color.white,
    filenameText = _useTheme$theme.messageInput.fileAttachmentUploadPreview.filenameText;
  var progressValueInSeconds = (0, _react.useMemo)(function () {
    return item.duration * item.progress;
  }, [item.duration, item.progress]);
  var progressDuration = (0, _react.useMemo)(function () {
    var _item$duration;
    return progressValueInSeconds ? progressValueInSeconds / 3600 >= 1 ? _dayjs.default.duration(progressValueInSeconds, 'second').format('HH:mm:ss') : _dayjs.default.duration(progressValueInSeconds, 'second').format('mm:ss') : _dayjs.default.duration((_item$duration = item.duration) != null ? _item$duration : 0, 'second').format('mm:ss');
  }, [progressValueInSeconds, item.duration]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    accessibilityLabel: "audio-attachment-preview",
    style: [styles.container, {
      backgroundColor: white,
      borderColor: grey_whisper
    }, container],
    testID: testID,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.leftContainer, leftContainer],
      children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        accessibilityLabel: "Play Pause Button",
        onPress: handlePlayPause,
        style: [styles.playPauseButton, {
          backgroundColor: static_white,
          shadowColor: black
        }, playPauseButton],
        children: item.paused ? (0, _jsxRuntime.jsx)(_icons.Play, {
          fill: static_black,
          height: 32,
          width: 32
        }) : (0, _jsxRuntime.jsx)(_icons.Pause, {
          fill: static_black,
          height: 32,
          width: 32
        })
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.centerContainer],
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        accessibilityLabel: "File Name",
        numberOfLines: 1,
        style: [styles.filenameText, {
          color: black
        }, _reactNative.I18nManager.isRTL ? {
          writingDirection: 'rtl'
        } : {
          writingDirection: 'ltr'
        }, filenameText],
        children: item.type === _types.FileTypes.VoiceRecording ? 'Recording' : (0, _getTrimmedAttachmentTitle.getTrimmedAttachmentTitle)(item.title, titleMaxLength)
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.audioInfo,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.progressDurationText, {
            color: grey_dark
          }, progressDurationText],
          children: progressDuration
        }), !hideProgressBar && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.progressControlContainer, progressControlContainer],
          children: item.waveform_data ? (0, _jsxRuntime.jsx)(_WaveProgressBar.WaveProgressBar, {
            amplitudesCount: 30,
            onEndDrag: dragEnd,
            onProgressDrag: dragProgress,
            onStartDrag: dragStart,
            progress: item.progress,
            waveformData: item.waveform_data
          }) : (0, _jsxRuntime.jsx)(_ProgressControl.ProgressControl, {
            duration: item.duration,
            filledColor: accent_blue,
            onEndDrag: dragEnd,
            onProgressDrag: dragProgress,
            onStartDrag: dragStart,
            progress: item.progress,
            testID: "progress-control"
          })
        })]
      }), ((_NativeHandlers$Sound3 = _native.NativeHandlers.Sound) == null ? void 0 : _NativeHandlers$Sound3.Player) && (0, _jsxRuntime.jsx)(_native.NativeHandlers.Sound.Player, {
        onEnd: handleEnd,
        onLoad: handleLoad,
        onProgress: handleProgress,
        onSeek: onSeek,
        paused: item.paused,
        rate: currentSpeed,
        soundRef: soundRef,
        testID: "sound-player",
        uri: item.asset_url
      })]
    }), showSpeedSettings ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.rightContainer, rightContainer],
      children: item.paused ? (0, _jsxRuntime.jsx)(_icons.Audio, {
        fill: '#ffffff'
      }) : (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        onPress: onSpeedChangeHandler,
        style: [styles.speedChangeButton, {
          backgroundColor: static_white,
          shadowColor: black
        }, speedChangeButton],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.speedChangeButtonText, speedChangeButtonText],
          children: `x${currentSpeed.toFixed(1)}`
        })
      })
    }) : null]
  });
};
var styles = _reactNative.StyleSheet.create({
  audioInfo: {
    alignItems: 'center',
    flexDirection: 'row'
  },
  centerContainer: {
    flexGrow: 1
  },
  container: {
    alignItems: 'center',
    borderRadius: 12,
    borderWidth: 1,
    flex: 1,
    flexDirection: 'row',
    paddingLeft: 8,
    paddingRight: 16,
    paddingVertical: 12
  },
  filenameText: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 8
  },
  leftContainer: {
    marginRight: 8
  },
  playPauseButton: {
    alignItems: 'center',
    borderRadius: 50,
    elevation: 4,
    justifyContent: 'center',
    marginRight: 8,
    padding: 4,
    shadowOffset: {
      height: 2,
      width: 0
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62
  },
  progressControlContainer: {
    flexGrow: 1,
    justifyContent: 'center'
  },
  progressDurationText: {
    fontSize: 12,
    marginRight: 8
  },
  rightContainer: {
    marginLeft: 16
  },
  speedChangeButton: {
    alignItems: 'center',
    alignSelf: 'center',
    borderRadius: 50,
    elevation: 4,
    justifyContent: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    shadowOffset: {
      height: 2,
      width: 0
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62
  },
  speedChangeButtonText: {
    fontSize: 12
  }
});
AudioAttachment.displayName = 'AudioAttachment{messageInput{audioAttachment}}';
//# sourceMappingURL=AudioAttachment.js.map