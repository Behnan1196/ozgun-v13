var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnreadMessagesNotification = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ChannelContext = require("../../contexts/channelContext/ChannelContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../contexts/translationContext/TranslationContext");
var _icons = require("../../icons");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageList/UnreadMessagesNotification.tsx";
var UnreadMessagesNotification = exports.UnreadMessagesNotification = function UnreadMessagesNotification(props) {
  var onCloseHandler = props.onCloseHandler,
    onPressHandler = props.onPressHandler;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useChannelContext = (0, _ChannelContext.useChannelContext)(),
    channelUnreadState = _useChannelContext.channelUnreadState,
    loadChannelAtFirstUnreadMessage = _useChannelContext.loadChannelAtFirstUnreadMessage,
    markRead = _useChannelContext.markRead,
    setChannelUnreadState = _useChannelContext.setChannelUnreadState,
    setTargetedMessage = _useChannelContext.setTargetedMessage;
  var handleOnPress = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      if (onPressHandler) {
        yield onPressHandler();
      } else {
        yield loadChannelAtFirstUnreadMessage({
          channelUnreadState: channelUnreadState,
          setChannelUnreadState: setChannelUnreadState,
          setTargetedMessage: setTargetedMessage
        });
      }
    });
    return function handleOnPress() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleClose = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (onCloseHandler) {
        yield onCloseHandler();
      } else {
        yield markRead();
      }
    });
    return function handleClose() {
      return _ref2.apply(this, arguments);
    };
  }();
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    text_low_emphasis = _useTheme$theme$color.text_low_emphasis,
    white_snow = _useTheme$theme$color.white_snow,
    _useTheme$theme$messa = _useTheme$theme.messageList.unreadMessagesNotification,
    closeButtonContainer = _useTheme$theme$messa.closeButtonContainer,
    closeIcon = _useTheme$theme$messa.closeIcon,
    container = _useTheme$theme$messa.container,
    text = _useTheme$theme$messa.text;
  return (0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
    onPress: handleOnPress,
    style: function style(_ref3) {
      var pressed = _ref3.pressed;
      return [styles.container, {
        backgroundColor: text_low_emphasis,
        opacity: pressed ? 0.8 : 1
      }, container];
    },
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: white_snow
      }, text],
      children: t('Unread Messages')
    }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      onPress: handleClose,
      style: function style(_ref4) {
        var pressed = _ref4.pressed;
        return [{
          opacity: pressed ? 0.8 : 1
        }, closeButtonContainer];
      },
      children: (0, _jsxRuntime.jsx)(_icons.Close, Object.assign({
        pathFill: white_snow
      }, closeIcon))
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    borderRadius: 20,
    elevation: 4,
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 8,
    position: 'absolute',
    shadowColor: '#000',
    shadowOffset: {
      height: 2,
      width: 0
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    top: 8
  },
  text: {
    fontWeight: '500',
    marginRight: 8
  }
});
//# sourceMappingURL=UnreadMessagesNotification.js.map