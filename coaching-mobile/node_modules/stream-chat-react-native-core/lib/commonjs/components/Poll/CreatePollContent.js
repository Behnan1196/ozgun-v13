var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreatePollContent = exports.CreatePoll = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var _streamChat = require("stream-chat");
var _components = require("./components");
var _CreatePollHeader = require("./components/CreatePollHeader");
var _MultipleAnswersField = require("./components/MultipleAnswersField");
var _NameField = require("./components/NameField");
var _contexts = require("../../contexts");
var _useMessageComposer = require("../../contexts/messageInputContext/hooks/useMessageComposer");
var _useStateStore2 = require("../../hooks/useStateStore");
var _constants = require("../../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/CreatePollContent.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var pollComposerStateSelector = function pollComposerStateSelector(state) {
  return {
    options: state.data.options
  };
};
var CreatePollContent = exports.CreatePollContent = function CreatePollContent() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isAnonymousPoll = _useState2[0],
    setIsAnonymousPoll = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    allowUserSuggestedOptions = _useState4[0],
    setAllowUserSuggestedOptions = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    allowAnswers = _useState6[0],
    setAllowAnswers = _useState6[1];
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var pollComposer = messageComposer.pollComposer;
  var _useStateStore = (0, _useStateStore2.useStateStore)(pollComposer.state, pollComposerStateSelector),
    options = _useStateStore.options;
  var _useCreatePollContent = (0, _contexts.useCreatePollContentContext)(),
    createPollOptionHeight = _useCreatePollContent.createPollOptionHeight,
    closePollCreationDialog = _useCreatePollContent.closePollCreationDialog,
    createAndSendPoll = _useCreatePollContent.createAndSendPoll;
  var currentOptionPositions = (0, _reactNativeReanimated.useSharedValue)({
    inverseIndexCache: {},
    positionCache: {}
  });
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.createContent,
    addComment = _useTheme$theme$poll$.addComment,
    anonymousPoll = _useTheme$theme$poll$.anonymousPoll,
    scrollView = _useTheme$theme$poll$.scrollView,
    suggestOption = _useTheme$theme$poll$.suggestOption;
  (0, _react.useEffect)(function () {
    if (!createPollOptionHeight) return;
    var newCurrentOptionPositions = {
      inverseIndexCache: {},
      positionCache: {}
    };
    options.forEach(function (option, index) {
      newCurrentOptionPositions.inverseIndexCache[index] = option.id;
      newCurrentOptionPositions.positionCache[option.id] = {
        updatedIndex: index,
        updatedTop: index * createPollOptionHeight
      };
    });
    currentOptionPositions.value = newCurrentOptionPositions;
  }, [createPollOptionHeight, currentOptionPositions, options]);
  var onBackPressHandler = (0, _react.useCallback)(function () {
    pollComposer.initState();
    closePollCreationDialog == null || closePollCreationDialog();
  }, [pollComposer, closePollCreationDialog]);
  var onCreatePollPressHandler = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield createAndSendPoll();
  }), [createAndSendPoll]);
  var onAnonymousPollChangeHandler = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (value) {
      setIsAnonymousPoll(value);
      yield pollComposer.updateFields({
        voting_visibility: value ? _streamChat.VotingVisibility.anonymous : _streamChat.VotingVisibility.public
      });
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [pollComposer]);
  var onAllowUserSuggestedOptionsChangeHandler = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (value) {
      setAllowUserSuggestedOptions(value);
      yield pollComposer.updateFields({
        allow_user_suggested_options: value
      });
    });
    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }(), [pollComposer]);
  var onAllowAnswersChangeHandler = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (value) {
      setAllowAnswers(value);
      yield pollComposer.updateFields({
        allow_answers: value
      });
    });
    return function (_x3) {
      return _ref4.apply(this, arguments);
    };
  }(), [pollComposer]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_CreatePollHeader.CreatePollHeader, {
      onBackPressHandler: onBackPressHandler,
      onCreatePollPressHandler: onCreatePollPressHandler
    }), (0, _jsxRuntime.jsxs)(_reactNativeGestureHandler.ScrollView, {
      contentContainerStyle: {
        paddingBottom: 70
      },
      style: [styles.scrollView, {
        backgroundColor: white
      }, scrollView],
      children: [(0, _jsxRuntime.jsx)(_NameField.NameField, {}), (0, _jsxRuntime.jsx)(_components.CreatePollOptions, {
        currentOptionPositions: currentOptionPositions
      }), (0, _jsxRuntime.jsx)(_MultipleAnswersField.MultipleAnswersField, {}), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, anonymousPoll.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, anonymousPoll.title],
          children: t('Anonymous poll')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: onAnonymousPollChangeHandler,
          value: isAnonymousPoll
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, suggestOption.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, suggestOption.title],
          children: t('Suggest an option')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: onAllowUserSuggestedOptionsChangeHandler,
          value: allowUserSuggestedOptions
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, addComment.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, addComment.title],
          children: t('Add a comment')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: onAllowAnswersChangeHandler,
          value: allowAnswers
        })]
      })]
    })]
  });
};
var CreatePoll = exports.CreatePoll = function CreatePoll(_ref5) {
  var closePollCreationDialog = _ref5.closePollCreationDialog,
    CreatePollContentOverride = _ref5.CreatePollContent,
    _ref5$createPollOptio = _ref5.createPollOptionHeight,
    createPollOptionHeight = _ref5$createPollOptio === void 0 ? _constants.POLL_OPTION_HEIGHT : _ref5$createPollOptio,
    sendMessage = _ref5.sendMessage;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var createAndSendPoll = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield messageComposer.createPoll();
      yield sendMessage();
      closePollCreationDialog == null || closePollCreationDialog();
      messageComposer.pollComposer.initState();
    } catch (error) {
      console.log('Error creating a poll and sending a message:', error);
    }
  }), [messageComposer, sendMessage, closePollCreationDialog]);
  return (0, _jsxRuntime.jsx)(_contexts.CreatePollContentProvider, {
    value: {
      closePollCreationDialog: closePollCreationDialog,
      createAndSendPoll: createAndSendPoll,
      createPollOptionHeight: createPollOptionHeight,
      sendMessage: sendMessage
    },
    children: CreatePollContentOverride ? (0, _jsxRuntime.jsx)(CreatePollContentOverride, {}) : (0, _jsxRuntime.jsx)(CreatePollContent, {})
  });
};
var styles = _reactNative.StyleSheet.create({
  scrollView: {
    flex: 1,
    padding: 16
  },
  text: {
    fontSize: 16
  },
  textInputWrapper: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 18
  }
});
//# sourceMappingURL=CreatePollContent.js.map