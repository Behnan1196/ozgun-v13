var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreatePollOptions = exports.CreatePollOption = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _contexts = require("../../../contexts");
var _useMessageComposer = require("../../../contexts/messageInputContext/hooks/useMessageComposer");
var _useStateStore2 = require("../../../hooks/useStateStore");
var _icons = require("../../../icons");
var _constants = require("../../../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/CreatePollOptions.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CreatePollOption = exports.CreatePollOption = function CreatePollOption(_ref) {
  var boundaries = _ref.boundaries,
    currentOptionPositions = _ref.currentOptionPositions,
    draggedItemId = _ref.draggedItemId,
    error = _ref.error,
    handleBlur = _ref.handleBlur,
    handleChangeText = _ref.handleChangeText,
    index = _ref.index,
    isDragging = _ref.isDragging,
    option = _ref.option,
    onNewOrder = _ref.onNewOrder;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useCreatePollContent = (0, _contexts.useCreatePollContentContext)(),
    _useCreatePollContent2 = _useCreatePollContent.createPollOptionHeight,
    createPollOptionHeight = _useCreatePollContent2 === void 0 ? _constants.POLL_OPTION_HEIGHT : _useCreatePollContent2;
  var top = (0, _reactNativeReanimated.useSharedValue)(index * createPollOptionHeight);
  var isDraggingDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return isDragging.value;
  });
  var draggedItemIdDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return draggedItemId.value;
  });
  var isCurrentDraggingItem = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return isDraggingDerived.value && draggedItemIdDerived.value === option.id;
  });
  var animatedStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      top: top.value,
      transform: [{
        scale: isCurrentDraggingItem.value ? (0, _reactNativeReanimated.interpolate)(isDraggingDerived.value, [0, 1], [1, 1.025]) : (0, _reactNativeReanimated.interpolate)(isDraggingDerived.value, [0, 1], [1, 0.98])
      }]
    };
  });
  var currentOptionPositionsDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return currentOptionPositions.value;
  });
  var newIndex = (0, _reactNativeReanimated.useSharedValue)(null);
  var currentIndex = (0, _reactNativeReanimated.useSharedValue)(null);
  (0, _reactNativeReanimated.useAnimatedReaction)(function () {
    var _currentOptionPositio, _currentOptionPositio2;
    return (_currentOptionPositio = (_currentOptionPositio2 = currentOptionPositionsDerived.value.positionCache[option.id]) == null ? void 0 : _currentOptionPositio2.updatedIndex) != null ? _currentOptionPositio : 0;
  }, function (currentValue, previousValue) {
    if (currentValue !== previousValue) {
      var _currentOptionPositio3, _currentOptionPositio4;
      var updatedIndex = (_currentOptionPositio3 = (_currentOptionPositio4 = currentOptionPositionsDerived.value.positionCache[option.id]) == null ? void 0 : _currentOptionPositio4.updatedIndex) != null ? _currentOptionPositio3 : 0;
      top.value = (0, _reactNativeReanimated.withSpring)(updatedIndex * createPollOptionHeight);
    }
  });
  var gesture = _reactNativeGestureHandler.Gesture.Pan().onStart(function () {
    isDragging.value = (0, _reactNativeReanimated.withSpring)(1);
    draggedItemId.value = option.id;
    currentIndex.value = currentOptionPositionsDerived.value.positionCache[option.id].updatedIndex;
  }).onUpdate(function (e) {
    var _currentOptionPositio5 = currentOptionPositionsDerived.value,
      inverseIndexCache = _currentOptionPositio5.inverseIndexCache,
      positionCache = _currentOptionPositio5.positionCache;
    if (draggedItemIdDerived.value === null || currentIndex.value === null) {
      return;
    }
    var newTop = positionCache[draggedItemIdDerived.value].updatedTop + e.translationY;
    if (newTop < boundaries.minBound - 10 || newTop > boundaries.maxBound + 10) {
      return;
    }
    top.value = newTop;
    newIndex.value = Math.floor((newTop + createPollOptionHeight / 2) / createPollOptionHeight);
    if (newIndex.value !== currentIndex.value) {
      var newIndexItemKey = inverseIndexCache[newIndex.value];
      var currentDragIndexItemKey = inverseIndexCache[currentIndex.value];
      if (newIndexItemKey !== undefined && currentDragIndexItemKey !== undefined) {
        currentOptionPositions.value = {
          inverseIndexCache: Object.assign({}, inverseIndexCache, (0, _defineProperty2.default)((0, _defineProperty2.default)({}, newIndex.value, currentDragIndexItemKey), currentIndex.value, newIndexItemKey)),
          positionCache: Object.assign({}, positionCache, (0, _defineProperty2.default)((0, _defineProperty2.default)({}, currentDragIndexItemKey, Object.assign({}, positionCache[currentDragIndexItemKey], {
            updatedIndex: newIndex.value
          })), newIndexItemKey, Object.assign({}, positionCache[newIndexItemKey], {
            updatedIndex: currentIndex.value,
            updatedTop: currentIndex.value * createPollOptionHeight
          })))
        };
        currentIndex.value = newIndex.value;
      }
    }
  }).onEnd(function () {
    var _currentOptionPositio6 = currentOptionPositionsDerived.value,
      inverseIndexCache = _currentOptionPositio6.inverseIndexCache,
      positionCache = _currentOptionPositio6.positionCache;
    if (currentIndex.value === null || newIndex.value === null) {
      return;
    }
    top.value = (0, _reactNativeReanimated.withSpring)(newIndex.value * createPollOptionHeight);
    var currentDragIndexItemKey = inverseIndexCache[currentIndex.value];
    if (currentDragIndexItemKey !== undefined) {
      currentOptionPositions.value = Object.assign({}, currentOptionPositionsDerived.value, {
        positionCache: Object.assign({}, positionCache, (0, _defineProperty2.default)({}, currentDragIndexItemKey, Object.assign({}, positionCache[currentDragIndexItemKey], {
          updatedTop: newIndex.value * createPollOptionHeight
        })))
      });
    }
    isDragging.value = (0, _reactNativeReanimated.withDelay)(200, (0, _reactNativeReanimated.withSpring)(0));
    (0, _reactNativeReanimated.runOnJS)(onNewOrder)(currentOptionPositionsDerived.value.inverseIndexCache);
  });
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_error = _useTheme$theme$color.accent_error,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    text_low_emphasis = _useTheme$theme$color.text_low_emphasis,
    optionStyle = _useTheme$theme.poll.createContent.pollOptions.optionStyle;
  var onChangeTextHandler = (0, _react.useCallback)(function (newText) {
    handleChangeText(newText, index);
  }, [handleChangeText, index]);
  return (0, _jsxRuntime.jsxs)(_reactNativeReanimated.default.View, {
    style: [styles.optionWrapper, optionStyle.wrapper, {
      backgroundColor: bg_user,
      borderColor: error ? accent_error : bg_user,
      position: 'absolute',
      width: '100%'
    }, animatedStyles],
    children: [error ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.optionValidationError, {
        color: accent_error
      }, optionStyle.validationErrorText],
      children: t(error)
    }) : null, (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      onBlur: handleBlur,
      onChangeText: onChangeTextHandler,
      placeholder: t('Add an option'),
      style: [styles.optionInput, {
        color: black
      }, optionStyle.input]
    }), (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: gesture,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        children: (0, _jsxRuntime.jsx)(_icons.DragHandle, {
          pathFill: text_low_emphasis
        })
      })
    })]
  });
};
var MemoizedCreatePollOption = _react.default.memo(CreatePollOption);
var pollComposerStateSelector = function pollComposerStateSelector(state) {
  return {
    errors: state.errors.options,
    options: state.data.options
  };
};
var CreatePollOptions = exports.CreatePollOptions = function CreatePollOptions(_ref2) {
  var currentOptionPositions = _ref2.currentOptionPositions;
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var pollComposer = messageComposer.pollComposer;
  var _useStateStore = (0, _useStateStore2.useStateStore)(pollComposer.state, pollComposerStateSelector),
    errors = _useStateStore.errors,
    options = _useStateStore.options;
  var _useCreatePollContent3 = (0, _contexts.useCreatePollContentContext)(),
    _useCreatePollContent4 = _useCreatePollContent3.createPollOptionHeight,
    createPollOptionHeight = _useCreatePollContent4 === void 0 ? _constants.POLL_OPTION_HEIGHT : _useCreatePollContent4;
  var updateOption = (0, _react.useCallback)(function (newText, index) {
    pollComposer.updateFields({
      options: {
        index: index,
        text: newText
      }
    });
  }, [pollComposer]);
  var handleBlur = (0, _react.useCallback)(function () {
    pollComposer.handleFieldBlur('options');
  }, [pollComposer]);
  var isDragging = (0, _reactNativeReanimated.useSharedValue)(0);
  var draggedItemId = (0, _reactNativeReanimated.useSharedValue)(null);
  var animatedOptionsContainerHeight = (0, _reactNativeReanimated.useSharedValue)(createPollOptionHeight * options.length);
  (0, _react.useEffect)(function () {
    animatedOptionsContainerHeight.value = (0, _reactNativeReanimated.withTiming)(createPollOptionHeight * options.length, {
      duration: 200
    });
  }, [animatedOptionsContainerHeight, createPollOptionHeight, options.length]);
  var animatedOptionsContainerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      height: animatedOptionsContainerHeight.value
    };
  });
  var boundaries = (0, _react.useMemo)(function () {
    return {
      maxBound: (options.length - 1) * createPollOptionHeight,
      minBound: 0
    };
  }, [createPollOptionHeight, options.length]);
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    black = _useTheme2$theme.colors.black,
    _useTheme2$theme$poll = _useTheme2$theme.poll.createContent.pollOptions,
    container = _useTheme2$theme$poll.container,
    title = _useTheme2$theme$poll.title;
  var onNewOrderChange = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (newOrder) {
      var reorderedPollOptions = [];
      var _loop = function* _loop(i) {
        var currentOption = options.find(function (option) {
          return option.id === newOrder[i];
        });
        if (currentOption) {
          reorderedPollOptions.push(currentOption);
        }
      };
      for (var i = 0; i < options.length; i++) {
        yield* _loop(i);
      }
      yield pollComposer.updateFields({
        options: reorderedPollOptions
      });
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [options, pollComposer]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, container],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: black
      }, title],
      children: t('Options')
    }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: animatedOptionsContainerStyle,
      children: options.map(function (option, index) {
        return (0, _jsxRuntime.jsx)(MemoizedCreatePollOption, {
          boundaries: boundaries,
          currentOptionPositions: currentOptionPositions,
          draggedItemId: draggedItemId,
          error: errors == null ? void 0 : errors[option.id],
          handleBlur: handleBlur,
          handleChangeText: updateOption,
          index: index,
          isDragging: isDragging,
          onNewOrder: onNewOrderChange,
          option: option
        }, option.id);
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  addOptionWrapper: {
    borderRadius: 12,
    marginTop: 8,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  container: {
    marginVertical: 16
  },
  optionInput: {
    flex: 1,
    fontSize: 16,
    paddingRight: 4,
    paddingVertical: 0
  },
  optionValidationError: {
    fontSize: 12,
    left: 16,
    position: 'absolute',
    top: 4
  },
  optionWrapper: {
    alignItems: 'center',
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  text: {
    fontSize: 16
  }
});
//# sourceMappingURL=CreatePollOptions.js.map