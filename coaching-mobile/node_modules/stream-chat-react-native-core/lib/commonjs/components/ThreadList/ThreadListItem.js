var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachmentTypeIconMap = exports.ThreadListItemComponent = exports.ThreadListItem = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../contexts");
var _ThreadListItemContext = require("../../contexts/threadsContext/ThreadListItemContext");
var _ThreadsContext = require("../../contexts/threadsContext/ThreadsContext");
var _hooks = require("../../hooks");
var _icons = require("../../icons");
var _types = require("../../types/types");
var _getDateString = require("../../utils/i18n/getDateString");
var _Avatar = require("../Avatar/Avatar");
var _useChannelPreviewDisplayName = require("../ChannelPreview/hooks/useChannelPreviewDisplayName");
var _MessagePreview = require("../MessagePreview/MessagePreview");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ThreadList/ThreadListItem.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = _reactNative.StyleSheet.create({
  boldText: {
    fontSize: 14,
    fontWeight: '500'
  },
  contentRow: {
    flexDirection: 'row',
    marginTop: 6
  },
  contentTextWrapper: {
    flex: 1,
    marginLeft: 8
  },
  dateText: {
    alignSelf: 'flex-end'
  },
  headerRow: {
    flexDirection: 'row'
  },
  infoRow: {
    alignItems: 'center',
    flexDirection: 'row'
  },
  parentMessagePreviewContainer: {
    flex: 1,
    marginVertical: 2
  },
  previewMessageContainer: {
    flex: 1,
    marginTop: 4
  },
  touchableWrapper: {
    flex: 1,
    paddingHorizontal: 8,
    paddingVertical: 14
  },
  unreadBubbleWrapper: {
    alignItems: 'center',
    alignSelf: 'flex-end',
    borderRadius: 50,
    height: 22,
    justifyContent: 'center',
    width: 22
  }
});
var attachmentTypeIconMap = exports.attachmentTypeIconMap = {
  audio: 'üîà',
  file: 'üìÑ',
  image: 'üì∑',
  video: 'üé•',
  voiceRecording: 'üéôÔ∏è'
};
var getMessageSenderName = function getMessageSenderName(message, currentUserId, t) {
  var _message$user, _message$user2, _message$user3, _message$user4;
  if ((message == null || (_message$user = message.user) == null ? void 0 : _message$user.id) === currentUserId) {
    return t('You');
  }
  return (message == null || (_message$user2 = message.user) == null ? void 0 : _message$user2.name) || (message == null || (_message$user3 = message.user) == null ? void 0 : _message$user3.username) || (message == null || (_message$user4 = message.user) == null ? void 0 : _message$user4.id) || '';
};
var getPreviewFromMessage = function getPreviewFromMessage(_ref) {
  var t = _ref.t,
    currentUserId = _ref.currentUserId,
    draftMessage = _ref.draftMessage,
    _ref$parentMessage = _ref.parentMessage,
    parentMessage = _ref$parentMessage === void 0 ? false : _ref$parentMessage,
    message = _ref.message;
  if (draftMessage) {
    var _draftMessage$attachm;
    if ((_draftMessage$attachm = draftMessage.attachments) != null && _draftMessage$attachm.length) {
      var _draftMessage$attachm2, _attachmentTypeIconMa, _ref2;
      var attachment = draftMessage == null || (_draftMessage$attachm2 = draftMessage.attachments) == null ? void 0 : _draftMessage$attachm2.at(0);
      var attachmentIcon = attachment ? `${(_attachmentTypeIconMa = attachmentTypeIconMap[(_ref2 = attachment.type) != null ? _ref2 : 'file']) != null ? _attachmentTypeIconMa : attachmentTypeIconMap.file} ` : '';
      if ((attachment == null ? void 0 : attachment.type) === _types.FileTypes.VoiceRecording) {
        return [{
          bold: true,
          draft: true,
          text: 'Draft: '
        }, {
          bold: false,
          text: attachmentIcon
        }, {
          bold: false,
          text: t('Voice message')
        }];
      }
      return [{
        bold: true,
        draft: true,
        text: 'Draft: '
      }, {
        bold: false,
        text: attachmentIcon
      }, {
        bold: false,
        text: (attachment == null ? void 0 : attachment.type) === _types.FileTypes.Image ? attachment != null && attachment.fallback ? attachment == null ? void 0 : attachment.fallback : 'N/A' : attachment != null && attachment.title ? attachment == null ? void 0 : attachment.title : 'N/A'
      }];
    }
    if (draftMessage.text) {
      return [{
        bold: true,
        draft: true,
        text: 'Draft: '
      }, {
        bold: false,
        text: draftMessage.text
      }];
    }
  }
  if (message) {
    var _message$user5, _message$attachments;
    var messageSender = getMessageSenderName(message, currentUserId, t);
    var messageSenderText = !parentMessage ? messageSender ? `${messageSender}: ` : '' : '';
    var isNotOwner = ((_message$user5 = message.user) == null ? void 0 : _message$user5.id) !== currentUserId;
    if (message.text) {
      return [{
        bold: isNotOwner,
        text: messageSenderText
      }, {
        bold: false,
        text: message.text || 'N/A'
      }];
    }
    if (message.command) {
      return [{
        bold: isNotOwner,
        text: messageSenderText
      }, {
        bold: false,
        text: `/${message.command}`
      }];
    }
    if (message != null && message.deleted_at && message.parent_id) {
      return [{
        bold: isNotOwner,
        text: messageSenderText
      }, {
        bold: false,
        text: `${t('This reply was deleted')}.`
      }];
    }
    if (message != null && message.deleted_at && !message.parent_id) {
      return [{
        bold: isNotOwner,
        text: messageSenderText
      }, {
        bold: false,
        text: `${t('The source message was deleted')}.`
      }];
    }
    if (message != null && (_message$attachments = message.attachments) != null && _message$attachments.length) {
      var _message$attachments2, _attachmentTypeIconMa2, _ref3;
      var _attachment = message == null || (_message$attachments2 = message.attachments) == null ? void 0 : _message$attachments2.at(0);
      var _attachmentIcon = _attachment ? `${(_attachmentTypeIconMa2 = attachmentTypeIconMap[(_ref3 = _attachment.type) != null ? _ref3 : 'file']) != null ? _attachmentTypeIconMa2 : attachmentTypeIconMap.file} ` : '';
      if ((_attachment == null ? void 0 : _attachment.type) === _types.FileTypes.VoiceRecording) {
        return [{
          bold: false,
          text: _attachmentIcon
        }, {
          bold: isNotOwner,
          text: messageSenderText
        }, {
          bold: false,
          text: t('Voice message')
        }];
      }
      return [{
        bold: false,
        text: _attachmentIcon
      }, {
        bold: isNotOwner,
        text: messageSenderText
      }, {
        bold: false,
        text: (_attachment == null ? void 0 : _attachment.type) === _types.FileTypes.Image ? _attachment != null && _attachment.fallback ? _attachment == null ? void 0 : _attachment.fallback : 'N/A' : _attachment != null && _attachment.title ? _attachment == null ? void 0 : _attachment.title : 'N/A'
      }];
    }
  }
  return [{
    bold: false,
    text: t('Empty message...')
  }];
};
var textComposerStateSelector = function textComposerStateSelector(state) {
  return {
    text: state.text
  };
};
var stateSelector = function stateSelector(state) {
  return {
    attachments: state.attachments
  };
};
var ThreadListItemComponent = exports.ThreadListItemComponent = function ThreadListItemComponent() {
  var _lastReply$user, _lastReply$user2, _lastReply$user3;
  var _useThreadListItemCon = (0, _ThreadListItemContext.useThreadListItemContext)(),
    channel = _useThreadListItemCon.channel,
    dateString = _useThreadListItemCon.dateString,
    deletedAtDateString = _useThreadListItemCon.deletedAtDateString,
    lastReply = _useThreadListItemCon.lastReply,
    ownUnreadMessageCount = _useThreadListItemCon.ownUnreadMessageCount,
    parentMessage = _useThreadListItemCon.parentMessage,
    thread = _useThreadListItemCon.thread;
  var displayName = (0, _useChannelPreviewDisplayName.useChannelPreviewDisplayName)(channel);
  var _useThreadsContext = (0, _ThreadsContext.useThreadsContext)(),
    onThreadSelect = _useThreadsContext.onThreadSelect;
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_red = _useTheme$theme$color.accent_red,
    text_low_emphasis = _useTheme$theme$color.text_low_emphasis,
    white = _useTheme$theme$color.white,
    threadListItem = _useTheme$theme.threadListItem;
  var _useStateStore = (0, _hooks.useStateStore)(thread.messageComposer.textComposer.state, textComposerStateSelector),
    draftText = _useStateStore.text;
  var _useStateStore2 = (0, _hooks.useStateStore)(thread.messageComposer.attachmentManager.state, stateSelector),
    attachments = _useStateStore2.attachments;
  (0, _react.useEffect)(function () {
    var unsubscribe = thread.messageComposer.registerDraftEventSubscriptions();
    return function () {
      return unsubscribe();
    };
  }, [thread.messageComposer]);
  var draftMessage = (0, _react.useMemo)(function () {
    return !thread.messageComposer.compositionIsEmpty ? {
      attachments: attachments,
      id: thread.messageComposer.id,
      text: draftText
    } : undefined;
  }, [thread.messageComposer, attachments, draftText]);
  var previews = (0, _react.useMemo)(function () {
    return getPreviewFromMessage({
      currentUserId: client.userID,
      draftMessage: draftMessage,
      message: lastReply,
      t: t
    });
  }, [client.userID, draftMessage, lastReply, t]);
  var parentMessagePreview = (0, _react.useMemo)(function () {
    return [{
      bold: true,
      text: `${t('replied to')}: `
    }].concat((0, _toConsumableArray2.default)(getPreviewFromMessage({
      currentUserId: client.userID,
      message: parentMessage,
      parentMessage: true,
      t: t
    })));
  }, [client.userID, parentMessage, t]);
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    onPress: function onPress() {
      if (onThreadSelect) {
        onThreadSelect({
          thread: parentMessage,
          threadInstance: thread
        }, channel);
      }
    },
    style: [styles.touchableWrapper, threadListItem.touchableWrapper],
    testID: "thread-list-item",
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.headerRow, threadListItem.headerRow],
      children: [(0, _jsxRuntime.jsx)(_icons.MessageBubble, {}), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: 1,
        style: [styles.boldText, {
          color: text_low_emphasis
        }, threadListItem.boldText],
        children: displayName || 'N/A'
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.infoRow, threadListItem.infoRow],
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.parentMessagePreviewContainer, threadListItem.parentMessagePreviewContainer],
        children: (0, _jsxRuntime.jsx)(_MessagePreview.MessagePreview, {
          previews: parentMessagePreview
        })
      }), ownUnreadMessageCount > 0 && !deletedAtDateString ? (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.unreadBubbleWrapper, {
          backgroundColor: accent_red
        }, threadListItem.unreadBubbleWrapper],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [{
            color: white
          }, threadListItem.unreadBubbleText],
          children: ownUnreadMessageCount
        })
      }) : null]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.contentRow, threadListItem.contentRow],
      children: [(0, _jsxRuntime.jsx)(_Avatar.Avatar, {
        image: lastReply == null || (_lastReply$user = lastReply.user) == null ? void 0 : _lastReply$user.image,
        online: lastReply == null || (_lastReply$user2 = lastReply.user) == null ? void 0 : _lastReply$user2.online,
        size: 40
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.contentTextWrapper, threadListItem.contentTextWrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.boldText, {
            color: text_low_emphasis
          }, threadListItem.boldText],
          children: lastReply == null || (_lastReply$user3 = lastReply.user) == null ? void 0 : _lastReply$user3.name
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.headerRow, threadListItem.headerRow],
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.previewMessageContainer, threadListItem.previewMessageContainer],
            children: (0, _jsxRuntime.jsx)(_MessagePreview.MessagePreview, {
              previews: previews
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.dateText, {
              color: text_low_emphasis
            }, threadListItem.dateText],
            children: deletedAtDateString != null ? deletedAtDateString : dateString
          })]
        })]
      })]
    })]
  });
};
var ThreadListItem = exports.ThreadListItem = function ThreadListItem(props) {
  var _useChatContext2 = (0, _contexts.useChatContext)(),
    client = _useChatContext2.client;
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t,
    tDateTimeParser = _useTranslationContex2.tDateTimeParser;
  var thread = props.thread,
    _props$timestampTrans = props.timestampTranslationKey,
    timestampTranslationKey = _props$timestampTrans === void 0 ? 'timestamp/ThreadListItem' : _props$timestampTrans;
  var _useThreadsContext2 = (0, _ThreadsContext.useThreadsContext)(),
    _useThreadsContext2$T = _useThreadsContext2.ThreadListItem,
    ThreadListItem = _useThreadsContext2$T === void 0 ? ThreadListItemComponent : _useThreadsContext2$T;
  var selector = (0, _react.useCallback)(function (nextValue) {
    var _nextValue$read$clien;
    return {
      channel: nextValue.channel,
      deletedAt: nextValue.deletedAt,
      lastReply: nextValue.replies.at(-1),
      ownUnreadMessageCount: client.userID && ((_nextValue$read$clien = nextValue.read[client.userID]) == null ? void 0 : _nextValue$read$clien.unreadMessageCount) || 0,
      parentMessage: nextValue.parentMessage
    };
  }, [client]);
  var _useStateStore3 = (0, _hooks.useStateStore)(thread.state, selector),
    channel = _useStateStore3.channel,
    deletedAt = _useStateStore3.deletedAt,
    lastReply = _useStateStore3.lastReply,
    ownUnreadMessageCount = _useStateStore3.ownUnreadMessageCount,
    parentMessage = _useStateStore3.parentMessage;
  var timestamp = lastReply == null ? void 0 : lastReply.created_at;
  var dateString = (0, _react.useMemo)(function () {
    return (0, _getDateString.getDateString)({
      date: timestamp,
      t: t,
      tDateTimeParser: tDateTimeParser,
      timestampTranslationKey: timestampTranslationKey
    });
  }, [timestamp, t, tDateTimeParser, timestampTranslationKey]);
  var deletedAtDateString = (0, _react.useMemo)(function () {
    return (0, _getDateString.getDateString)({
      date: deletedAt,
      t: t,
      tDateTimeParser: tDateTimeParser,
      timestampTranslationKey: timestampTranslationKey
    });
  }, [deletedAt, t, tDateTimeParser, timestampTranslationKey]);
  return (0, _jsxRuntime.jsx)(_ThreadListItemContext.ThreadListItemProvider, {
    value: {
      channel: channel,
      dateString: dateString,
      deletedAtDateString: deletedAtDateString,
      lastReply: lastReply,
      ownUnreadMessageCount: ownUnreadMessageCount,
      parentMessage: parentMessage,
      thread: thread
    },
    children: (0, _jsxRuntime.jsx)(ThreadListItem, {})
  });
};
//# sourceMappingURL=ThreadListItem.js.map