var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderAttachmentPickerItem = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _streamChat = require("stream-chat");
var _useAttachmentManagerState = require("../../../contexts/messageInputContext/hooks/useAttachmentManagerState");
var _useMessageComposer = require("../../../contexts/messageInputContext/hooks/useMessageComposer");
var _MessageInputContext = require("../../../contexts/messageInputContext/MessageInputContext");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../../contexts/translationContext/TranslationContext");
var _useViewport3 = require("../../../hooks/useViewport");
var _icons = require("../../../icons");
var _utils = require("../../../utils/utils");
var _BottomSheetTouchableOpacity = require("../../BottomSheetCompatibility/BottomSheetTouchableOpacity");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AttachmentPicker/components/AttachmentPickerItem.tsx";
var AttachmentVideo = function AttachmentVideo(props) {
  var asset = props.asset,
    ImageOverlaySelectedComponent = props.ImageOverlaySelectedComponent,
    numberOfAttachmentPickerImageColumns = props.numberOfAttachmentPickerImageColumns;
  var _useViewport = (0, _useViewport3.useViewport)(),
    vw = _useViewport.vw;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    uploadNewFile = _useMessageInputConte.uploadNewFile;
  var attachmentManager = messageComposer.attachmentManager;
  var _useAttachmentManager = (0, _useAttachmentManagerState.useAttachmentManagerState)(),
    attachments = _useAttachmentManager.attachments,
    availableUploadSlots = _useAttachmentManager.availableUploadSlots;
  var videoUploads = attachments.filter(function (attachment) {
    return (0, _streamChat.isLocalVideoAttachment)(attachment);
  });
  var selected = videoUploads.some(function (attachment) {
    return attachment.localMetadata.file.uri === asset.uri;
  });
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$attac = _useTheme$theme.attachmentPicker,
    durationText = _useTheme$theme$attac.durationText,
    image = _useTheme$theme$attac.image,
    imageOverlay = _useTheme$theme$attac.imageOverlay,
    _useTheme$theme$color = _useTheme$theme.colors,
    overlay = _useTheme$theme$color.overlay,
    white = _useTheme$theme$color.white;
  var videoDuration = asset.duration,
    thumb_url = asset.thumb_url,
    uri = asset.uri;
  var durationLabel = videoDuration ? (0, _utils.getDurationLabelFromDuration)(videoDuration) : '00:00';
  var size = vw(100) / (numberOfAttachmentPickerImageColumns || 3) - 2;
  var onPressVideo = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      if (selected) {
        var attachment = videoUploads.find(function (attachment) {
          return attachment.localMetadata.file.uri === uri;
        });
        if (attachment) {
          attachmentManager.removeAttachments([attachment.localMetadata.id]);
        }
      } else {
        if (!availableUploadSlots) {
          _reactNative.Alert.alert(t('Maximum number of files reached'));
          return;
        }
        yield uploadNewFile(asset);
      }
    });
    return function onPressVideo() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_BottomSheetTouchableOpacity.BottomSheetTouchableOpacity, {
    onPress: onPressVideo,
    children: (0, _jsxRuntime.jsxs)(_reactNative.ImageBackground, {
      source: {
        uri: thumb_url
      },
      style: [{
        height: size,
        margin: 1,
        width: size
      }, image],
      children: [selected && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.overlay, {
          backgroundColor: overlay
        }, imageOverlay],
        children: (0, _jsxRuntime.jsx)(ImageOverlaySelectedComponent, {})
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.videoView,
        children: [(0, _jsxRuntime.jsx)(_icons.Recorder, {
          height: 20,
          pathFill: white,
          width: 20
        }), videoDuration ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [{
            color: white
          }, styles.durationText, durationText],
          children: durationLabel
        }) : null]
      })]
    })
  });
};
var AttachmentImage = function AttachmentImage(props) {
  var asset = props.asset,
    ImageOverlaySelectedComponent = props.ImageOverlaySelectedComponent,
    numberOfAttachmentPickerImageColumns = props.numberOfAttachmentPickerImageColumns;
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    _useTheme2$theme$atta = _useTheme2$theme.attachmentPicker,
    image = _useTheme2$theme$atta.image,
    imageOverlay = _useTheme2$theme$atta.imageOverlay,
    overlay = _useTheme2$theme.colors.overlay;
  var _useViewport2 = (0, _useViewport3.useViewport)(),
    vw = _useViewport2.vw;
  var _useMessageInputConte2 = (0, _MessageInputContext.useMessageInputContext)(),
    uploadNewFile = _useMessageInputConte2.uploadNewFile;
  var messageComposer = (0, _useMessageComposer.useMessageComposer)();
  var attachmentManager = messageComposer.attachmentManager;
  var _useAttachmentManager2 = (0, _useAttachmentManagerState.useAttachmentManagerState)(),
    attachments = _useAttachmentManager2.attachments,
    availableUploadSlots = _useAttachmentManager2.availableUploadSlots;
  var imageUploads = attachments.filter(function (attachment) {
    return (0, _streamChat.isLocalImageAttachment)(attachment);
  });
  var selected = imageUploads.some(function (attachment) {
    return attachment.localMetadata.previewUri === asset.uri;
  });
  var size = vw(100) / (numberOfAttachmentPickerImageColumns || 3) - 2;
  var uri = asset.uri;
  var onPressImage = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (selected) {
        var attachment = imageUploads.find(function (attachment) {
          return attachment.localMetadata.previewUri === uri;
        });
        if (attachment) {
          yield attachmentManager.removeAttachments([attachment.localMetadata.id]);
        }
      } else {
        if (!availableUploadSlots) {
          _reactNative.Alert.alert('Maximum number of files reached');
          return;
        }
        yield uploadNewFile(asset);
      }
    });
    return function onPressImage() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_BottomSheetTouchableOpacity.BottomSheetTouchableOpacity, {
    onPress: onPressImage,
    children: (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
      source: {
        uri: uri
      },
      style: [{
        height: size,
        margin: 1,
        width: size
      }, image],
      children: selected && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.overlay, {
          backgroundColor: overlay
        }, imageOverlay],
        children: (0, _jsxRuntime.jsx)(ImageOverlaySelectedComponent, {})
      })
    })
  });
};
var renderAttachmentPickerItem = exports.renderAttachmentPickerItem = function renderAttachmentPickerItem(_ref3) {
  var item = _ref3.item;
  var asset = item.asset,
    ImageOverlaySelectedComponent = item.ImageOverlaySelectedComponent,
    numberOfAttachmentPickerImageColumns = item.numberOfAttachmentPickerImageColumns;
  var isVideoType = asset.type.includes('video');
  if (isVideoType) {
    return (0, _jsxRuntime.jsx)(AttachmentVideo, {
      asset: asset,
      ImageOverlaySelectedComponent: ImageOverlaySelectedComponent,
      numberOfAttachmentPickerImageColumns: numberOfAttachmentPickerImageColumns
    });
  }
  return (0, _jsxRuntime.jsx)(AttachmentImage, {
    asset: asset,
    ImageOverlaySelectedComponent: ImageOverlaySelectedComponent,
    numberOfAttachmentPickerImageColumns: numberOfAttachmentPickerImageColumns
  });
};
var styles = _reactNative.StyleSheet.create({
  durationText: {
    fontWeight: 'bold'
  },
  overlay: {
    alignItems: 'flex-end',
    flex: 1
  },
  videoView: {
    bottom: 5,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 5,
    position: 'absolute',
    width: '100%'
  }
});
//# sourceMappingURL=AttachmentPickerItem.js.map