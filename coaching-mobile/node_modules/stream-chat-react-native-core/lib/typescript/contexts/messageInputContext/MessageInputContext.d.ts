import React, { PropsWithChildren, Ref } from 'react';
import { TextInput, TextInputProps } from 'react-native';
import { BottomSheetHandleProps } from '@gorhom/bottom-sheet';
import { LocalMessage, SendMessageOptions, StreamChat, Message as StreamMessage, UpdateMessageOptions, UploadRequestFn, UserResponse } from 'stream-chat';
import { AutoCompleteSuggestionHeaderProps, AutoCompleteSuggestionItemProps, AutoCompleteSuggestionListProps, PollContentProps, StopMessageStreamingButtonProps } from '../../components';
import type { AttachButtonProps } from '../../components/MessageInput/AttachButton';
import { AttachmentUploadPreviewListProps } from '../../components/MessageInput/AttachmentUploadPreviewList';
import type { CommandsButtonProps } from '../../components/MessageInput/CommandsButton';
import type { AttachmentUploadProgressIndicatorProps } from '../../components/MessageInput/components/AttachmentPreview/AttachmentUploadProgressIndicator';
import { AudioAttachmentUploadPreviewProps } from '../../components/MessageInput/components/AttachmentPreview/AudioAttachmentUploadPreview';
import { FileAttachmentUploadPreviewProps } from '../../components/MessageInput/components/AttachmentPreview/FileAttachmentUploadPreview';
import { ImageAttachmentUploadPreviewProps } from '../../components/MessageInput/components/AttachmentPreview/ImageAttachmentUploadPreview';
import type { AudioRecorderProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecorder';
import type { AudioRecordingButtonProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecordingButton';
import type { AudioRecordingInProgressProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecordingInProgress';
import type { AudioRecordingLockIndicatorProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecordingLockIndicator';
import type { AudioRecordingPreviewProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecordingPreview';
import type { AudioRecordingWaveformProps } from '../../components/MessageInput/components/AudioRecorder/AudioRecordingWaveform';
import type { CommandInputProps } from '../../components/MessageInput/components/CommandInput';
import type { InputEditingStateHeaderProps } from '../../components/MessageInput/components/InputEditingStateHeader';
import type { CooldownTimerProps } from '../../components/MessageInput/CooldownTimer';
import type { InputButtonsProps } from '../../components/MessageInput/InputButtons';
import type { MessageInputProps } from '../../components/MessageInput/MessageInput';
import type { MoreOptionsButtonProps } from '../../components/MessageInput/MoreOptionsButton';
import type { SendButtonProps } from '../../components/MessageInput/SendButton';
import { MediaTypes } from '../../native';
import { File } from '../../types/types';
import { AttachmentPickerIconProps } from '../attachmentPickerContext/AttachmentPickerContext';
export type LocalMessageInputContext = {
    closeAttachmentPicker: () => void;
    /** The time at which the active cooldown will end */
    cooldownEndsAt: Date;
    inputBoxRef: React.RefObject<TextInput | null>;
    openAttachmentPicker: () => void;
    /**
     * Function for picking a photo from native image picker and uploading it.
     */
    pickAndUploadImageFromNativePicker: () => Promise<void>;
    pickFile: () => Promise<void>;
    selectedPicker?: 'images';
    sendMessage: () => Promise<void>;
    /**
     * Ref callback to set reference on input box
     */
    setInputBoxRef: Ref<TextInput> | undefined;
    /**
     * Function for taking a photo and uploading it
     */
    takeAndUploadImage: (mediaType?: MediaTypes) => Promise<void>;
    toggleAttachmentPicker: () => void;
    uploadNewFile: (file: File) => Promise<void>;
};
export type InputMessageInputContextValue = {
    /**
     * Controls how many pixels to the top side the user has to scroll in order to lock the recording view and allow the
     * user to lift their finger from the screen without stopping the recording.
     */
    asyncMessagesLockDistance: number;
    /**
     * Controls the minimum duration that the user has to press on the record button in the composer, in order to start
     * recording a new voice message.
     */
    asyncMessagesMinimumPressDuration: number;
    /**
     * When it’s enabled, recorded messages won’t be sent immediately. Instead they will “stack up” in the composer
     * allowing the user to send multiple voice recording as part of the same message.
     */
    asyncMessagesMultiSendEnabled: boolean;
    /**
     * Controls how many pixels to the leading side the user has to scroll in order to cancel the recording of a voice
     * message.
     */
    asyncMessagesSlideToCancelDistance: number;
    /**
     * Custom UI component for attach button.
     *
     * Defaults to and accepts same props as:
     * [AttachButton](https://getstream.io/chat/docs/sdk/reactnative/ui-components/attach-button/)
     */
    AttachButton: React.ComponentType<AttachButtonProps>;
    /**
     * Custom UI component for audio recorder UI.
     *
     * Defaults to and accepts same props as:
     * [AudioRecorder](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/AudioRecorder.tsx)
     */
    AudioRecorder: React.ComponentType<AudioRecorderProps>;
    /**
     * Controls whether the async audio feature is enabled.
     */
    audioRecordingEnabled: boolean;
    /**
     * Custom UI component to render audio recording in progress.
     *
     * **Default**
     * [AudioRecordingInProgress](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/components/AudioRecorder/AudioRecordingInProgress.tsx)
     */
    AudioRecordingInProgress: React.ComponentType<AudioRecordingInProgressProps>;
    /**
     * Custom UI component for audio recording lock indicator.
     *
     * Defaults to and accepts same props as:
     * [AudioRecordingLockIndicator](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/components/AudioRecorder/AudioRecordingLockIndicator.tsx)
     */
    AudioRecordingLockIndicator: React.ComponentType<AudioRecordingLockIndicatorProps>;
    /**
     * Custom UI component to render audio recording preview.
     *
     * **Default**
     * [AudioRecordingPreview](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/components/AudioRecorder/AudioRecordingPreview.tsx)
     */
    AudioRecordingPreview: React.ComponentType<AudioRecordingPreviewProps>;
    /**
     * Custom UI component to render audio recording waveform.
     *
     * **Default**
     * [AudioRecordingWaveform](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/components/AudioRecorder/AudioRecordingWaveform.tsx)
     */
    AudioRecordingWaveform: React.ComponentType<AudioRecordingWaveformProps>;
    AutoCompleteSuggestionHeader: React.ComponentType<AutoCompleteSuggestionHeaderProps>;
    AutoCompleteSuggestionItem: React.ComponentType<AutoCompleteSuggestionItemProps>;
    AutoCompleteSuggestionList: React.ComponentType<AutoCompleteSuggestionListProps>;
    /**
     * Custom UI component to render [draggable handle](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/1.png) of attachmentpicker.
     *
     * **Default**
     * [AttachmentPickerBottomSheetHandle](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/AttachmentPickerBottomSheetHandle.tsx)
     */
    AttachmentPickerBottomSheetHandle: React.FC<BottomSheetHandleProps>;
    /**
     * Height of the image picker bottom sheet handle.
     * @type number
     * @default 20
     */
    attachmentPickerBottomSheetHandleHeight: number;
    /**
     * Height of the image picker bottom sheet when opened.
     * @type number
     * @default 40% of window height
     */
    attachmentPickerBottomSheetHeight: number;
    /**
     * Custom UI component for AttachmentPickerSelectionBar
     *
     * **Default: **
     * [AttachmentPickerSelectionBar](https://github.com/GetStream/stream-chat-react-native/blob/develop/package/src/components/AttachmentPicker/components/AttachmentPickerSelectionBar.tsx)
     */
    AttachmentPickerSelectionBar: React.ComponentType;
    /**
     * Height of the attachment selection bar displayed on the attachment picker.
     * @type number
     * @default 52
     */
    attachmentSelectionBarHeight: number;
    AttachmentUploadPreviewList: React.ComponentType<AttachmentUploadPreviewListProps>;
    /**
     * Custom UI component for [camera selector icon](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/1.png)
     *
     * **Default: **
     * [CameraSelectorIcon](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/CameraSelectorIcon.tsx)
     */
    CameraSelectorIcon: React.ComponentType<AttachmentPickerIconProps>;
    /**
     * Custom UI component for the poll creation icon.
     *
     * **Default: **
     * [CreatePollIcon](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/CreatePollIcon.tsx)
     */
    CreatePollIcon: React.ComponentType;
    /**
     * Custom UI component for [file selector icon](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/1.png)
     *
     * **Default: **
     * [FileSelectorIcon](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/FileSelectorIcon.tsx)
     */
    FileSelectorIcon: React.ComponentType<AttachmentPickerIconProps>;
    /**
     * Custom UI component for [image selector icon](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/1.png)
     *
     * **Default: **
     * [ImageSelectorIcon](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/ImageSelectorIcon.tsx)
     */
    ImageSelectorIcon: React.ComponentType<AttachmentPickerIconProps>;
    /**
     * Custom UI component for Android's video recorder selector icon.
     *
     * **Default: **
     * [VideoRecorderSelectorIcon](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/AttachmentPicker/components/VideoRecorderSelectorIcon.tsx)
     */
    VideoRecorderSelectorIcon: React.ComponentType<AttachmentPickerIconProps>;
    AudioAttachmentUploadPreview: React.ComponentType<AudioAttachmentUploadPreviewProps>;
    ImageAttachmentUploadPreview: React.ComponentType<ImageAttachmentUploadPreviewProps>;
    FileAttachmentUploadPreview: React.ComponentType<FileAttachmentUploadPreviewProps>;
    VideoAttachmentUploadPreview: React.ComponentType<FileAttachmentUploadPreviewProps>;
    /**
     * Custom UI component for commands button.
     *
     * Defaults to and accepts same props as:
     * [CommandsButton](https://getstream.io/chat/docs/sdk/reactnative/ui-components/commands-button/)
     */
    CommandsButton: React.ComponentType<CommandsButtonProps>;
    /**
     * Custom UI component to display the remaining cooldown a user will have to wait before
     * being allowed to send another message. This component is displayed in place of the
     * send button for the MessageInput component.
     *
     * **default**
     * [CooldownTimer](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/CooldownTimer.tsx)
     */
    CooldownTimer: React.ComponentType<CooldownTimerProps>;
    editMessage: (params: {
        localMessage: LocalMessage;
        options?: UpdateMessageOptions;
    }) => ReturnType<StreamChat['updateMessage']>;
    /** When false, CameraSelectorIcon will be hidden */
    hasCameraPicker: boolean;
    /** When false, CommandsButton will be hidden */
    hasCommands: boolean;
    /** When false, FileSelectorIcon will be hidden */
    hasFilePicker: boolean;
    /** When false, ImageSelectorIcon will be hidden */
    hasImagePicker: boolean;
    InputEditingStateHeader: React.ComponentType<InputEditingStateHeaderProps>;
    CommandInput: React.ComponentType<CommandInputProps>;
    InputReplyStateHeader: React.ComponentType;
    /**
     * Custom UI component for more options button.
     *
     * Defaults to and accepts same props as:
     * [MoreOptionsButton](https://getstream.io/chat/docs/sdk/reactnative/ui-components/more-options-button/)
     */
    MoreOptionsButton: React.ComponentType<MoreOptionsButtonProps>;
    /**
     * Custom UI component for send button.
     *
     * Defaults to and accepts same props as:
     * [SendButton](https://getstream.io/chat/docs/sdk/reactnative/ui-components/send-button/)
     */
    SendButton: React.ComponentType<SendButtonProps>;
    sendMessage: (params: {
        localMessage: LocalMessage;
        message: StreamMessage;
        options?: SendMessageOptions;
    }) => Promise<void>;
    /**
     * Custom UI component to render checkbox with text ("Also send to channel") in Thread's input box.
     * When ticked, message will also be sent in parent channel.
     */
    ShowThreadMessageInChannelButton: React.ComponentType<{
        threadList?: boolean;
    }>;
    /**
     * Custom UI component for audio recording mic button.
     *
     * Defaults to and accepts same props as:
     * [AudioRecordingButton](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/components/AudioRecorder/AudioRecordingButton.tsx)
     */
    StartAudioRecordingButton: React.ComponentType<AudioRecordingButtonProps>;
    StopMessageStreamingButton: React.ComponentType<StopMessageStreamingButtonProps> | null;
    /**
     * Custom UI component to render upload progress indicator on attachment preview.
     */
    AttachmentUploadProgressIndicator: React.ComponentType<AttachmentUploadProgressIndicatorProps>;
    /**
     * Additional props for underlying TextInput component. These props will be forwarded as it is to TextInput component.
     *
     * @see See https://reactnative.dev/docs/textinput#reference
     */
    additionalTextInputProps?: TextInputProps;
    closePollCreationDialog?: () => void;
    /**
     * Compress image with quality (from 0 to 1, where 1 is best quality).
     * On iOS, values larger than 0.8 don't produce a noticeable quality increase in most images,
     * while a value of 0.8 will reduce the file size by about half or less compared to a value of 1.
     * Image picker defaults to 0.8 for iOS and 1 for Android
     */
    compressImageQuality?: number;
    /**
     * Override the entire content of the CreatePoll component. The component has full access to the useCreatePollContext() hook.
     * */
    CreatePollContent?: React.ComponentType<PollContentProps>;
    /**
     * Override file upload request
     *
     * @param file    File object
     *
     * @overrideType Function
     */
    doFileUploadRequest?: UploadRequestFn;
    /**
     * Handler for when the attach button is pressed.
     */
    handleAttachButtonPress?: () => void;
    /**
     * Custom UI component for AutoCompleteInput.
     * Has access to all of [MessageInputContext](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/contexts/messageInputContext/MessageInputContext.tsx)
     */
    Input?: React.ComponentType<Omit<MessageInputProps, 'Input'> & InputButtonsProps & {
        getUsers: () => UserResponse[];
    }>;
    /**
     * Custom UI component to override buttons on left side of input box
     * Defaults to
     * [InputButtons](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageInput/InputButtons.tsx),
     * which contain following components/buttons:
     *
     *  - AttachButton
     *  - CommandsButtom
     *
     * You have access to following prop functions:
     *
     * - closeAttachmentPicker
     * - openAttachmentPicker
     * - openCommandsPicker
     * - toggleAttachmentPicker
     */
    InputButtons?: React.ComponentType<InputButtonsProps>;
    openPollCreationDialog?: ({ sendMessage }: Pick<LocalMessageInputContext, 'sendMessage'>) => void;
    SendMessageDisallowedIndicator?: React.ComponentType;
    /**
     * ref for input setter function
     *
     * @param ref [Ref object](https://reactjs.org/docs/refs-and-the-dom.html) for underling `TextInput` component.
     *
     * @overrideType Function
     */
    setInputRef?: (ref: TextInput | null) => void;
    showPollCreationDialog?: boolean;
};
export type MessageInputContextValue = LocalMessageInputContext & Omit<InputMessageInputContextValue, 'sendMessage'>;
export declare const MessageInputContext: React.Context<MessageInputContextValue>;
export declare const MessageInputProvider: ({ children, value, }: PropsWithChildren<{
    value: InputMessageInputContextValue;
}>) => React.JSX.Element;
export declare const useMessageInputContext: () => MessageInputContextValue;
//# sourceMappingURL=MessageInputContext.d.ts.map