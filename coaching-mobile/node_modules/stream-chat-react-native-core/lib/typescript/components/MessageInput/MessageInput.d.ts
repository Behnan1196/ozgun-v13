import React from 'react';
import { ChatContextValue } from '../../contexts';
import { AttachmentPickerContextValue } from '../../contexts/attachmentPickerContext/AttachmentPickerContext';
import { ChannelContextValue } from '../../contexts/channelContext/ChannelContext';
import { MessageComposerAPIContextValue } from '../../contexts/messageComposerContext/MessageComposerAPIContext';
import { MessageInputContextValue } from '../../contexts/messageInputContext/MessageInputContext';
import { MessagesContextValue } from '../../contexts/messagesContext/MessagesContext';
import { TranslationContextValue } from '../../contexts/translationContext/TranslationContext';
type MessageInputPropsWithContext = Pick<AttachmentPickerContextValue, 'bottomInset' | 'selectedPicker'> & Pick<ChatContextValue, 'isOnline'> & Pick<ChannelContextValue, 'channel' | 'members' | 'threadList' | 'watchers'> & Pick<MessageInputContextValue, 'additionalTextInputProps' | 'audioRecordingEnabled' | 'asyncMessagesLockDistance' | 'asyncMessagesMinimumPressDuration' | 'asyncMessagesSlideToCancelDistance' | 'asyncMessagesMultiSendEnabled' | 'attachmentPickerBottomSheetHeight' | 'AttachmentPickerSelectionBar' | 'attachmentSelectionBarHeight' | 'AttachmentUploadPreviewList' | 'AudioRecorder' | 'AudioRecordingInProgress' | 'AudioRecordingLockIndicator' | 'AudioRecordingPreview' | 'AutoCompleteSuggestionList' | 'cooldownEndsAt' | 'CooldownTimer' | 'closeAttachmentPicker' | 'compressImageQuality' | 'Input' | 'inputBoxRef' | 'InputButtons' | 'InputEditingStateHeader' | 'CameraSelectorIcon' | 'CreatePollIcon' | 'FileSelectorIcon' | 'ImageSelectorIcon' | 'VideoRecorderSelectorIcon' | 'CommandInput' | 'InputReplyStateHeader' | 'SendButton' | 'ShowThreadMessageInChannelButton' | 'StartAudioRecordingButton' | 'uploadNewFile' | 'openPollCreationDialog' | 'closePollCreationDialog' | 'showPollCreationDialog' | 'sendMessage' | 'CreatePollContent' | 'StopMessageStreamingButton'> & Pick<MessagesContextValue, 'Reply'> & Pick<TranslationContextValue, 't'> & Pick<MessageComposerAPIContextValue, 'clearEditingState'> & {
    editing: boolean;
};
export type MessageInputProps = Partial<MessageInputPropsWithContext>;
/**
 * UI Component for message input
 * It's a consumer of
 * [Channel Context](https://getstream.io/chat/docs/sdk/reactnative/contexts/channel-context/),
 * [Chat Context](https://getstream.io/chat/docs/sdk/reactnative/contexts/chat-context/),
 * [MessageInput Context](https://getstream.io/chat/docs/sdk/reactnative/contexts/message-input-context/),
 * [Suggestions Context](https://getstream.io/chat/docs/sdk/reactnative/contexts/suggestions-context/), and
 * [Translation Context](https://getstream.io/chat/docs/sdk/reactnative/contexts/translation-context/)
 */
export declare const MessageInput: {
    (props: MessageInputProps): React.JSX.Element;
    displayName: string;
};
export {};
//# sourceMappingURL=MessageInput.d.ts.map