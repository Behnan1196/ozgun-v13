import type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';
import type { ChatContextValue } from '../../../contexts/chatContext/ChatContext';
import { MessageComposerAPIContextValue } from '../../../contexts/messageComposerContext/MessageComposerAPIContext';
import type { MessageContextValue } from '../../../contexts/messageContext/MessageContext';
import type { MessagesContextValue } from '../../../contexts/messagesContext/MessagesContext';
export declare const useMessageActionHandlers: ({ channel, client, deleteMessage, deleteReaction, message, retrySendMessage, sendReaction, setEditingState, setQuotedMessage, }: Pick<MessagesContextValue, "sendReaction" | "deleteMessage" | "deleteReaction" | "retrySendMessage" | "supportedReactions"> & Pick<ChannelContextValue, "channel" | "enforceUniqueReaction"> & Pick<ChatContextValue, "client"> & Pick<MessageContextValue, "message"> & Pick<MessageComposerAPIContextValue, "setEditingState" | "setQuotedMessage">) => {
    handleCopyMessage: () => void;
    handleDeleteMessage: () => void;
    handleEditMessage: () => void;
    handleFlagMessage: () => void;
    handleMarkUnreadMessage: () => Promise<void>;
    handleQuotedReplyMessage: () => void;
    handleResendMessage: () => Promise<void>;
    handleToggleBanUser: () => Promise<void>;
    handleToggleMuteUser: () => Promise<void>;
    handleTogglePinMessage: () => Promise<void>;
    handleToggleReaction: (reactionType: string) => Promise<void>;
};
//# sourceMappingURL=useMessageActionHandlers.d.ts.map